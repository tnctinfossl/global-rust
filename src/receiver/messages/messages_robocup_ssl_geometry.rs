// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages_robocup_ssl_geometry.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct Vector2f {
    // message fields
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vector2f {
    fn default() -> &'a Vector2f {
        <Vector2f as ::protobuf::Message>::default_instance()
    }
}

impl Vector2f {
    pub fn new() -> Vector2f {
        ::std::default::Default::default()
    }

    // required float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Vector2f {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += 5;
        }
        if let Some(v) = self.y {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_float(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vector2f {
        Vector2f::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &Vector2f| { &m.x },
                    |m: &mut Vector2f| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &Vector2f| { &m.y },
                    |m: &mut Vector2f| { &mut m.y },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Vector2f>(
                    "Vector2f",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Vector2f {
        static mut instance: ::protobuf::lazy::Lazy<Vector2f> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Vector2f,
        };
        unsafe {
            instance.get(Vector2f::new)
        }
    }
}

impl ::protobuf::Clear for Vector2f {
    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vector2f {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector2f {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_FieldLineSegment {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    p1: ::protobuf::SingularPtrField<Vector2f>,
    p2: ::protobuf::SingularPtrField<Vector2f>,
    thickness: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_FieldLineSegment {
    fn default() -> &'a SSL_FieldLineSegment {
        <SSL_FieldLineSegment as ::protobuf::Message>::default_instance()
    }
}

impl SSL_FieldLineSegment {
    pub fn new() -> SSL_FieldLineSegment {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .Vector2f p1 = 2;


    pub fn get_p1(&self) -> &Vector2f {
        self.p1.as_ref().unwrap_or_else(|| Vector2f::default_instance())
    }
    pub fn clear_p1(&mut self) {
        self.p1.clear();
    }

    pub fn has_p1(&self) -> bool {
        self.p1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p1(&mut self, v: Vector2f) {
        self.p1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p1(&mut self) -> &mut Vector2f {
        if self.p1.is_none() {
            self.p1.set_default();
        }
        self.p1.as_mut().unwrap()
    }

    // Take field
    pub fn take_p1(&mut self) -> Vector2f {
        self.p1.take().unwrap_or_else(|| Vector2f::new())
    }

    // required .Vector2f p2 = 3;


    pub fn get_p2(&self) -> &Vector2f {
        self.p2.as_ref().unwrap_or_else(|| Vector2f::default_instance())
    }
    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    pub fn has_p2(&self) -> bool {
        self.p2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: Vector2f) {
        self.p2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut Vector2f {
        if self.p2.is_none() {
            self.p2.set_default();
        }
        self.p2.as_mut().unwrap()
    }

    // Take field
    pub fn take_p2(&mut self) -> Vector2f {
        self.p2.take().unwrap_or_else(|| Vector2f::new())
    }

    // required float thickness = 4;


    pub fn get_thickness(&self) -> f32 {
        self.thickness.unwrap_or(0.)
    }
    pub fn clear_thickness(&mut self) {
        self.thickness = ::std::option::Option::None;
    }

    pub fn has_thickness(&self) -> bool {
        self.thickness.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thickness(&mut self, v: f32) {
        self.thickness = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_FieldLineSegment {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.p1.is_none() {
            return false;
        }
        if self.p2.is_none() {
            return false;
        }
        if self.thickness.is_none() {
            return false;
        }
        for v in &self.p1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p2 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p1)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p2)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.thickness = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.p1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.thickness {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.p1.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p2.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.thickness {
            os.write_float(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_FieldLineSegment {
        SSL_FieldLineSegment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &SSL_FieldLineSegment| { &m.name },
                    |m: &mut SSL_FieldLineSegment| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2f>>(
                    "p1",
                    |m: &SSL_FieldLineSegment| { &m.p1 },
                    |m: &mut SSL_FieldLineSegment| { &mut m.p1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2f>>(
                    "p2",
                    |m: &SSL_FieldLineSegment| { &m.p2 },
                    |m: &mut SSL_FieldLineSegment| { &mut m.p2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "thickness",
                    |m: &SSL_FieldLineSegment| { &m.thickness },
                    |m: &mut SSL_FieldLineSegment| { &mut m.thickness },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_FieldLineSegment>(
                    "SSL_FieldLineSegment",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_FieldLineSegment {
        static mut instance: ::protobuf::lazy::Lazy<SSL_FieldLineSegment> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_FieldLineSegment,
        };
        unsafe {
            instance.get(SSL_FieldLineSegment::new)
        }
    }
}

impl ::protobuf::Clear for SSL_FieldLineSegment {
    fn clear(&mut self) {
        self.name.clear();
        self.p1.clear();
        self.p2.clear();
        self.thickness = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_FieldLineSegment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_FieldLineSegment {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_FieldCicularArc {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    center: ::protobuf::SingularPtrField<Vector2f>,
    radius: ::std::option::Option<f32>,
    a1: ::std::option::Option<f32>,
    a2: ::std::option::Option<f32>,
    thickness: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_FieldCicularArc {
    fn default() -> &'a SSL_FieldCicularArc {
        <SSL_FieldCicularArc as ::protobuf::Message>::default_instance()
    }
}

impl SSL_FieldCicularArc {
    pub fn new() -> SSL_FieldCicularArc {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .Vector2f center = 2;


    pub fn get_center(&self) -> &Vector2f {
        self.center.as_ref().unwrap_or_else(|| Vector2f::default_instance())
    }
    pub fn clear_center(&mut self) {
        self.center.clear();
    }

    pub fn has_center(&self) -> bool {
        self.center.is_some()
    }

    // Param is passed by value, moved
    pub fn set_center(&mut self, v: Vector2f) {
        self.center = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_center(&mut self) -> &mut Vector2f {
        if self.center.is_none() {
            self.center.set_default();
        }
        self.center.as_mut().unwrap()
    }

    // Take field
    pub fn take_center(&mut self) -> Vector2f {
        self.center.take().unwrap_or_else(|| Vector2f::new())
    }

    // required float radius = 3;


    pub fn get_radius(&self) -> f32 {
        self.radius.unwrap_or(0.)
    }
    pub fn clear_radius(&mut self) {
        self.radius = ::std::option::Option::None;
    }

    pub fn has_radius(&self) -> bool {
        self.radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius(&mut self, v: f32) {
        self.radius = ::std::option::Option::Some(v);
    }

    // required float a1 = 4;


    pub fn get_a1(&self) -> f32 {
        self.a1.unwrap_or(0.)
    }
    pub fn clear_a1(&mut self) {
        self.a1 = ::std::option::Option::None;
    }

    pub fn has_a1(&self) -> bool {
        self.a1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_a1(&mut self, v: f32) {
        self.a1 = ::std::option::Option::Some(v);
    }

    // required float a2 = 5;


    pub fn get_a2(&self) -> f32 {
        self.a2.unwrap_or(0.)
    }
    pub fn clear_a2(&mut self) {
        self.a2 = ::std::option::Option::None;
    }

    pub fn has_a2(&self) -> bool {
        self.a2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_a2(&mut self, v: f32) {
        self.a2 = ::std::option::Option::Some(v);
    }

    // required float thickness = 6;


    pub fn get_thickness(&self) -> f32 {
        self.thickness.unwrap_or(0.)
    }
    pub fn clear_thickness(&mut self) {
        self.thickness = ::std::option::Option::None;
    }

    pub fn has_thickness(&self) -> bool {
        self.thickness.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thickness(&mut self, v: f32) {
        self.thickness = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_FieldCicularArc {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.center.is_none() {
            return false;
        }
        if self.radius.is_none() {
            return false;
        }
        if self.a1.is_none() {
            return false;
        }
        if self.a2.is_none() {
            return false;
        }
        if self.thickness.is_none() {
            return false;
        }
        for v in &self.center {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.center)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.radius = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.a1 = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.a2 = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.thickness = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.center.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.radius {
            my_size += 5;
        }
        if let Some(v) = self.a1 {
            my_size += 5;
        }
        if let Some(v) = self.a2 {
            my_size += 5;
        }
        if let Some(v) = self.thickness {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.center.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.radius {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.a1 {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.a2 {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.thickness {
            os.write_float(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_FieldCicularArc {
        SSL_FieldCicularArc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &SSL_FieldCicularArc| { &m.name },
                    |m: &mut SSL_FieldCicularArc| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2f>>(
                    "center",
                    |m: &SSL_FieldCicularArc| { &m.center },
                    |m: &mut SSL_FieldCicularArc| { &mut m.center },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "radius",
                    |m: &SSL_FieldCicularArc| { &m.radius },
                    |m: &mut SSL_FieldCicularArc| { &mut m.radius },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "a1",
                    |m: &SSL_FieldCicularArc| { &m.a1 },
                    |m: &mut SSL_FieldCicularArc| { &mut m.a1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "a2",
                    |m: &SSL_FieldCicularArc| { &m.a2 },
                    |m: &mut SSL_FieldCicularArc| { &mut m.a2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "thickness",
                    |m: &SSL_FieldCicularArc| { &m.thickness },
                    |m: &mut SSL_FieldCicularArc| { &mut m.thickness },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_FieldCicularArc>(
                    "SSL_FieldCicularArc",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_FieldCicularArc {
        static mut instance: ::protobuf::lazy::Lazy<SSL_FieldCicularArc> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_FieldCicularArc,
        };
        unsafe {
            instance.get(SSL_FieldCicularArc::new)
        }
    }
}

impl ::protobuf::Clear for SSL_FieldCicularArc {
    fn clear(&mut self) {
        self.name.clear();
        self.center.clear();
        self.radius = ::std::option::Option::None;
        self.a1 = ::std::option::Option::None;
        self.a2 = ::std::option::Option::None;
        self.thickness = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_FieldCicularArc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_FieldCicularArc {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryFieldSize {
    // message fields
    field_length: ::std::option::Option<i32>,
    field_width: ::std::option::Option<i32>,
    goal_width: ::std::option::Option<i32>,
    goal_depth: ::std::option::Option<i32>,
    boundary_width: ::std::option::Option<i32>,
    field_lines: ::protobuf::RepeatedField<SSL_FieldLineSegment>,
    field_arcs: ::protobuf::RepeatedField<SSL_FieldCicularArc>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryFieldSize {
    fn default() -> &'a SSL_GeometryFieldSize {
        <SSL_GeometryFieldSize as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryFieldSize {
    pub fn new() -> SSL_GeometryFieldSize {
        ::std::default::Default::default()
    }

    // required int32 field_length = 1;


    pub fn get_field_length(&self) -> i32 {
        self.field_length.unwrap_or(0)
    }
    pub fn clear_field_length(&mut self) {
        self.field_length = ::std::option::Option::None;
    }

    pub fn has_field_length(&self) -> bool {
        self.field_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_length(&mut self, v: i32) {
        self.field_length = ::std::option::Option::Some(v);
    }

    // required int32 field_width = 2;


    pub fn get_field_width(&self) -> i32 {
        self.field_width.unwrap_or(0)
    }
    pub fn clear_field_width(&mut self) {
        self.field_width = ::std::option::Option::None;
    }

    pub fn has_field_width(&self) -> bool {
        self.field_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_width(&mut self, v: i32) {
        self.field_width = ::std::option::Option::Some(v);
    }

    // required int32 goal_width = 3;


    pub fn get_goal_width(&self) -> i32 {
        self.goal_width.unwrap_or(0)
    }
    pub fn clear_goal_width(&mut self) {
        self.goal_width = ::std::option::Option::None;
    }

    pub fn has_goal_width(&self) -> bool {
        self.goal_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_width(&mut self, v: i32) {
        self.goal_width = ::std::option::Option::Some(v);
    }

    // required int32 goal_depth = 4;


    pub fn get_goal_depth(&self) -> i32 {
        self.goal_depth.unwrap_or(0)
    }
    pub fn clear_goal_depth(&mut self) {
        self.goal_depth = ::std::option::Option::None;
    }

    pub fn has_goal_depth(&self) -> bool {
        self.goal_depth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_depth(&mut self, v: i32) {
        self.goal_depth = ::std::option::Option::Some(v);
    }

    // required int32 boundary_width = 5;


    pub fn get_boundary_width(&self) -> i32 {
        self.boundary_width.unwrap_or(0)
    }
    pub fn clear_boundary_width(&mut self) {
        self.boundary_width = ::std::option::Option::None;
    }

    pub fn has_boundary_width(&self) -> bool {
        self.boundary_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boundary_width(&mut self, v: i32) {
        self.boundary_width = ::std::option::Option::Some(v);
    }

    // repeated .SSL_FieldLineSegment field_lines = 6;


    pub fn get_field_lines(&self) -> &[SSL_FieldLineSegment] {
        &self.field_lines
    }
    pub fn clear_field_lines(&mut self) {
        self.field_lines.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_lines(&mut self, v: ::protobuf::RepeatedField<SSL_FieldLineSegment>) {
        self.field_lines = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_lines(&mut self) -> &mut ::protobuf::RepeatedField<SSL_FieldLineSegment> {
        &mut self.field_lines
    }

    // Take field
    pub fn take_field_lines(&mut self) -> ::protobuf::RepeatedField<SSL_FieldLineSegment> {
        ::std::mem::replace(&mut self.field_lines, ::protobuf::RepeatedField::new())
    }

    // repeated .SSL_FieldCicularArc field_arcs = 7;


    pub fn get_field_arcs(&self) -> &[SSL_FieldCicularArc] {
        &self.field_arcs
    }
    pub fn clear_field_arcs(&mut self) {
        self.field_arcs.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_arcs(&mut self, v: ::protobuf::RepeatedField<SSL_FieldCicularArc>) {
        self.field_arcs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_arcs(&mut self) -> &mut ::protobuf::RepeatedField<SSL_FieldCicularArc> {
        &mut self.field_arcs
    }

    // Take field
    pub fn take_field_arcs(&mut self) -> ::protobuf::RepeatedField<SSL_FieldCicularArc> {
        ::std::mem::replace(&mut self.field_arcs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SSL_GeometryFieldSize {
    fn is_initialized(&self) -> bool {
        if self.field_length.is_none() {
            return false;
        }
        if self.field_width.is_none() {
            return false;
        }
        if self.goal_width.is_none() {
            return false;
        }
        if self.goal_depth.is_none() {
            return false;
        }
        if self.boundary_width.is_none() {
            return false;
        }
        for v in &self.field_lines {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.field_arcs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_length = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_width = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_width = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_depth = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.boundary_width = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_lines)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_arcs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_length {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.field_width {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_width {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_depth {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.boundary_width {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.field_lines {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.field_arcs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_length {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.field_width {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.goal_width {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.goal_depth {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.boundary_width {
            os.write_int32(5, v)?;
        }
        for v in &self.field_lines {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.field_arcs {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryFieldSize {
        SSL_GeometryFieldSize::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "field_length",
                    |m: &SSL_GeometryFieldSize| { &m.field_length },
                    |m: &mut SSL_GeometryFieldSize| { &mut m.field_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "field_width",
                    |m: &SSL_GeometryFieldSize| { &m.field_width },
                    |m: &mut SSL_GeometryFieldSize| { &mut m.field_width },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "goal_width",
                    |m: &SSL_GeometryFieldSize| { &m.goal_width },
                    |m: &mut SSL_GeometryFieldSize| { &mut m.goal_width },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "goal_depth",
                    |m: &SSL_GeometryFieldSize| { &m.goal_depth },
                    |m: &mut SSL_GeometryFieldSize| { &mut m.goal_depth },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "boundary_width",
                    |m: &SSL_GeometryFieldSize| { &m.boundary_width },
                    |m: &mut SSL_GeometryFieldSize| { &mut m.boundary_width },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_FieldLineSegment>>(
                    "field_lines",
                    |m: &SSL_GeometryFieldSize| { &m.field_lines },
                    |m: &mut SSL_GeometryFieldSize| { &mut m.field_lines },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_FieldCicularArc>>(
                    "field_arcs",
                    |m: &SSL_GeometryFieldSize| { &m.field_arcs },
                    |m: &mut SSL_GeometryFieldSize| { &mut m.field_arcs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_GeometryFieldSize>(
                    "SSL_GeometryFieldSize",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_GeometryFieldSize {
        static mut instance: ::protobuf::lazy::Lazy<SSL_GeometryFieldSize> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_GeometryFieldSize,
        };
        unsafe {
            instance.get(SSL_GeometryFieldSize::new)
        }
    }
}

impl ::protobuf::Clear for SSL_GeometryFieldSize {
    fn clear(&mut self) {
        self.field_length = ::std::option::Option::None;
        self.field_width = ::std::option::Option::None;
        self.goal_width = ::std::option::Option::None;
        self.goal_depth = ::std::option::Option::None;
        self.boundary_width = ::std::option::Option::None;
        self.field_lines.clear();
        self.field_arcs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryFieldSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryFieldSize {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryCameraCalibration {
    // message fields
    camera_id: ::std::option::Option<u32>,
    focal_length: ::std::option::Option<f32>,
    principal_point_x: ::std::option::Option<f32>,
    principal_point_y: ::std::option::Option<f32>,
    distortion: ::std::option::Option<f32>,
    q0: ::std::option::Option<f32>,
    q1: ::std::option::Option<f32>,
    q2: ::std::option::Option<f32>,
    q3: ::std::option::Option<f32>,
    tx: ::std::option::Option<f32>,
    ty: ::std::option::Option<f32>,
    tz: ::std::option::Option<f32>,
    derived_camera_world_tx: ::std::option::Option<f32>,
    derived_camera_world_ty: ::std::option::Option<f32>,
    derived_camera_world_tz: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryCameraCalibration {
    fn default() -> &'a SSL_GeometryCameraCalibration {
        <SSL_GeometryCameraCalibration as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryCameraCalibration {
    pub fn new() -> SSL_GeometryCameraCalibration {
        ::std::default::Default::default()
    }

    // required uint32 camera_id = 1;


    pub fn get_camera_id(&self) -> u32 {
        self.camera_id.unwrap_or(0)
    }
    pub fn clear_camera_id(&mut self) {
        self.camera_id = ::std::option::Option::None;
    }

    pub fn has_camera_id(&self) -> bool {
        self.camera_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_camera_id(&mut self, v: u32) {
        self.camera_id = ::std::option::Option::Some(v);
    }

    // required float focal_length = 2;


    pub fn get_focal_length(&self) -> f32 {
        self.focal_length.unwrap_or(0.)
    }
    pub fn clear_focal_length(&mut self) {
        self.focal_length = ::std::option::Option::None;
    }

    pub fn has_focal_length(&self) -> bool {
        self.focal_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_focal_length(&mut self, v: f32) {
        self.focal_length = ::std::option::Option::Some(v);
    }

    // required float principal_point_x = 3;


    pub fn get_principal_point_x(&self) -> f32 {
        self.principal_point_x.unwrap_or(0.)
    }
    pub fn clear_principal_point_x(&mut self) {
        self.principal_point_x = ::std::option::Option::None;
    }

    pub fn has_principal_point_x(&self) -> bool {
        self.principal_point_x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_principal_point_x(&mut self, v: f32) {
        self.principal_point_x = ::std::option::Option::Some(v);
    }

    // required float principal_point_y = 4;


    pub fn get_principal_point_y(&self) -> f32 {
        self.principal_point_y.unwrap_or(0.)
    }
    pub fn clear_principal_point_y(&mut self) {
        self.principal_point_y = ::std::option::Option::None;
    }

    pub fn has_principal_point_y(&self) -> bool {
        self.principal_point_y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_principal_point_y(&mut self, v: f32) {
        self.principal_point_y = ::std::option::Option::Some(v);
    }

    // required float distortion = 5;


    pub fn get_distortion(&self) -> f32 {
        self.distortion.unwrap_or(0.)
    }
    pub fn clear_distortion(&mut self) {
        self.distortion = ::std::option::Option::None;
    }

    pub fn has_distortion(&self) -> bool {
        self.distortion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_distortion(&mut self, v: f32) {
        self.distortion = ::std::option::Option::Some(v);
    }

    // required float q0 = 6;


    pub fn get_q0(&self) -> f32 {
        self.q0.unwrap_or(0.)
    }
    pub fn clear_q0(&mut self) {
        self.q0 = ::std::option::Option::None;
    }

    pub fn has_q0(&self) -> bool {
        self.q0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q0(&mut self, v: f32) {
        self.q0 = ::std::option::Option::Some(v);
    }

    // required float q1 = 7;


    pub fn get_q1(&self) -> f32 {
        self.q1.unwrap_or(0.)
    }
    pub fn clear_q1(&mut self) {
        self.q1 = ::std::option::Option::None;
    }

    pub fn has_q1(&self) -> bool {
        self.q1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q1(&mut self, v: f32) {
        self.q1 = ::std::option::Option::Some(v);
    }

    // required float q2 = 8;


    pub fn get_q2(&self) -> f32 {
        self.q2.unwrap_or(0.)
    }
    pub fn clear_q2(&mut self) {
        self.q2 = ::std::option::Option::None;
    }

    pub fn has_q2(&self) -> bool {
        self.q2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q2(&mut self, v: f32) {
        self.q2 = ::std::option::Option::Some(v);
    }

    // required float q3 = 9;


    pub fn get_q3(&self) -> f32 {
        self.q3.unwrap_or(0.)
    }
    pub fn clear_q3(&mut self) {
        self.q3 = ::std::option::Option::None;
    }

    pub fn has_q3(&self) -> bool {
        self.q3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q3(&mut self, v: f32) {
        self.q3 = ::std::option::Option::Some(v);
    }

    // required float tx = 10;


    pub fn get_tx(&self) -> f32 {
        self.tx.unwrap_or(0.)
    }
    pub fn clear_tx(&mut self) {
        self.tx = ::std::option::Option::None;
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: f32) {
        self.tx = ::std::option::Option::Some(v);
    }

    // required float ty = 11;


    pub fn get_ty(&self) -> f32 {
        self.ty.unwrap_or(0.)
    }
    pub fn clear_ty(&mut self) {
        self.ty = ::std::option::Option::None;
    }

    pub fn has_ty(&self) -> bool {
        self.ty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ty(&mut self, v: f32) {
        self.ty = ::std::option::Option::Some(v);
    }

    // required float tz = 12;


    pub fn get_tz(&self) -> f32 {
        self.tz.unwrap_or(0.)
    }
    pub fn clear_tz(&mut self) {
        self.tz = ::std::option::Option::None;
    }

    pub fn has_tz(&self) -> bool {
        self.tz.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tz(&mut self, v: f32) {
        self.tz = ::std::option::Option::Some(v);
    }

    // optional float derived_camera_world_tx = 13;


    pub fn get_derived_camera_world_tx(&self) -> f32 {
        self.derived_camera_world_tx.unwrap_or(0.)
    }
    pub fn clear_derived_camera_world_tx(&mut self) {
        self.derived_camera_world_tx = ::std::option::Option::None;
    }

    pub fn has_derived_camera_world_tx(&self) -> bool {
        self.derived_camera_world_tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derived_camera_world_tx(&mut self, v: f32) {
        self.derived_camera_world_tx = ::std::option::Option::Some(v);
    }

    // optional float derived_camera_world_ty = 14;


    pub fn get_derived_camera_world_ty(&self) -> f32 {
        self.derived_camera_world_ty.unwrap_or(0.)
    }
    pub fn clear_derived_camera_world_ty(&mut self) {
        self.derived_camera_world_ty = ::std::option::Option::None;
    }

    pub fn has_derived_camera_world_ty(&self) -> bool {
        self.derived_camera_world_ty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derived_camera_world_ty(&mut self, v: f32) {
        self.derived_camera_world_ty = ::std::option::Option::Some(v);
    }

    // optional float derived_camera_world_tz = 15;


    pub fn get_derived_camera_world_tz(&self) -> f32 {
        self.derived_camera_world_tz.unwrap_or(0.)
    }
    pub fn clear_derived_camera_world_tz(&mut self) {
        self.derived_camera_world_tz = ::std::option::Option::None;
    }

    pub fn has_derived_camera_world_tz(&self) -> bool {
        self.derived_camera_world_tz.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derived_camera_world_tz(&mut self, v: f32) {
        self.derived_camera_world_tz = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_GeometryCameraCalibration {
    fn is_initialized(&self) -> bool {
        if self.camera_id.is_none() {
            return false;
        }
        if self.focal_length.is_none() {
            return false;
        }
        if self.principal_point_x.is_none() {
            return false;
        }
        if self.principal_point_y.is_none() {
            return false;
        }
        if self.distortion.is_none() {
            return false;
        }
        if self.q0.is_none() {
            return false;
        }
        if self.q1.is_none() {
            return false;
        }
        if self.q2.is_none() {
            return false;
        }
        if self.q3.is_none() {
            return false;
        }
        if self.tx.is_none() {
            return false;
        }
        if self.ty.is_none() {
            return false;
        }
        if self.tz.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.camera_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.focal_length = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.principal_point_x = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.principal_point_y = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.distortion = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q0 = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q1 = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q2 = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q3 = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.tx = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.ty = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.tz = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.derived_camera_world_tx = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.derived_camera_world_ty = ::std::option::Option::Some(tmp);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.derived_camera_world_tz = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.camera_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.focal_length {
            my_size += 5;
        }
        if let Some(v) = self.principal_point_x {
            my_size += 5;
        }
        if let Some(v) = self.principal_point_y {
            my_size += 5;
        }
        if let Some(v) = self.distortion {
            my_size += 5;
        }
        if let Some(v) = self.q0 {
            my_size += 5;
        }
        if let Some(v) = self.q1 {
            my_size += 5;
        }
        if let Some(v) = self.q2 {
            my_size += 5;
        }
        if let Some(v) = self.q3 {
            my_size += 5;
        }
        if let Some(v) = self.tx {
            my_size += 5;
        }
        if let Some(v) = self.ty {
            my_size += 5;
        }
        if let Some(v) = self.tz {
            my_size += 5;
        }
        if let Some(v) = self.derived_camera_world_tx {
            my_size += 5;
        }
        if let Some(v) = self.derived_camera_world_ty {
            my_size += 5;
        }
        if let Some(v) = self.derived_camera_world_tz {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.camera_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.focal_length {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.principal_point_x {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.principal_point_y {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.distortion {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.q0 {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.q1 {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.q2 {
            os.write_float(8, v)?;
        }
        if let Some(v) = self.q3 {
            os.write_float(9, v)?;
        }
        if let Some(v) = self.tx {
            os.write_float(10, v)?;
        }
        if let Some(v) = self.ty {
            os.write_float(11, v)?;
        }
        if let Some(v) = self.tz {
            os.write_float(12, v)?;
        }
        if let Some(v) = self.derived_camera_world_tx {
            os.write_float(13, v)?;
        }
        if let Some(v) = self.derived_camera_world_ty {
            os.write_float(14, v)?;
        }
        if let Some(v) = self.derived_camera_world_tz {
            os.write_float(15, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryCameraCalibration {
        SSL_GeometryCameraCalibration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "camera_id",
                    |m: &SSL_GeometryCameraCalibration| { &m.camera_id },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.camera_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "focal_length",
                    |m: &SSL_GeometryCameraCalibration| { &m.focal_length },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.focal_length },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "principal_point_x",
                    |m: &SSL_GeometryCameraCalibration| { &m.principal_point_x },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.principal_point_x },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "principal_point_y",
                    |m: &SSL_GeometryCameraCalibration| { &m.principal_point_y },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.principal_point_y },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "distortion",
                    |m: &SSL_GeometryCameraCalibration| { &m.distortion },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.distortion },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "q0",
                    |m: &SSL_GeometryCameraCalibration| { &m.q0 },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.q0 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "q1",
                    |m: &SSL_GeometryCameraCalibration| { &m.q1 },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.q1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "q2",
                    |m: &SSL_GeometryCameraCalibration| { &m.q2 },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.q2 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "q3",
                    |m: &SSL_GeometryCameraCalibration| { &m.q3 },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.q3 },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "tx",
                    |m: &SSL_GeometryCameraCalibration| { &m.tx },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.tx },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "ty",
                    |m: &SSL_GeometryCameraCalibration| { &m.ty },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.ty },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "tz",
                    |m: &SSL_GeometryCameraCalibration| { &m.tz },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.tz },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "derived_camera_world_tx",
                    |m: &SSL_GeometryCameraCalibration| { &m.derived_camera_world_tx },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.derived_camera_world_tx },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "derived_camera_world_ty",
                    |m: &SSL_GeometryCameraCalibration| { &m.derived_camera_world_ty },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.derived_camera_world_ty },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "derived_camera_world_tz",
                    |m: &SSL_GeometryCameraCalibration| { &m.derived_camera_world_tz },
                    |m: &mut SSL_GeometryCameraCalibration| { &mut m.derived_camera_world_tz },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_GeometryCameraCalibration>(
                    "SSL_GeometryCameraCalibration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_GeometryCameraCalibration {
        static mut instance: ::protobuf::lazy::Lazy<SSL_GeometryCameraCalibration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_GeometryCameraCalibration,
        };
        unsafe {
            instance.get(SSL_GeometryCameraCalibration::new)
        }
    }
}

impl ::protobuf::Clear for SSL_GeometryCameraCalibration {
    fn clear(&mut self) {
        self.camera_id = ::std::option::Option::None;
        self.focal_length = ::std::option::Option::None;
        self.principal_point_x = ::std::option::Option::None;
        self.principal_point_y = ::std::option::Option::None;
        self.distortion = ::std::option::Option::None;
        self.q0 = ::std::option::Option::None;
        self.q1 = ::std::option::Option::None;
        self.q2 = ::std::option::Option::None;
        self.q3 = ::std::option::Option::None;
        self.tx = ::std::option::Option::None;
        self.ty = ::std::option::Option::None;
        self.tz = ::std::option::Option::None;
        self.derived_camera_world_tx = ::std::option::Option::None;
        self.derived_camera_world_ty = ::std::option::Option::None;
        self.derived_camera_world_tz = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryCameraCalibration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryCameraCalibration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryData {
    // message fields
    field: ::protobuf::SingularPtrField<SSL_GeometryFieldSize>,
    calib: ::protobuf::RepeatedField<SSL_GeometryCameraCalibration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryData {
    fn default() -> &'a SSL_GeometryData {
        <SSL_GeometryData as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryData {
    pub fn new() -> SSL_GeometryData {
        ::std::default::Default::default()
    }

    // required .SSL_GeometryFieldSize field = 1;


    pub fn get_field(&self) -> &SSL_GeometryFieldSize {
        self.field.as_ref().unwrap_or_else(|| SSL_GeometryFieldSize::default_instance())
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: SSL_GeometryFieldSize) {
        self.field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut SSL_GeometryFieldSize {
        if self.field.is_none() {
            self.field.set_default();
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> SSL_GeometryFieldSize {
        self.field.take().unwrap_or_else(|| SSL_GeometryFieldSize::new())
    }

    // repeated .SSL_GeometryCameraCalibration calib = 2;


    pub fn get_calib(&self) -> &[SSL_GeometryCameraCalibration] {
        &self.calib
    }
    pub fn clear_calib(&mut self) {
        self.calib.clear();
    }

    // Param is passed by value, moved
    pub fn set_calib(&mut self, v: ::protobuf::RepeatedField<SSL_GeometryCameraCalibration>) {
        self.calib = v;
    }

    // Mutable pointer to the field.
    pub fn mut_calib(&mut self) -> &mut ::protobuf::RepeatedField<SSL_GeometryCameraCalibration> {
        &mut self.calib
    }

    // Take field
    pub fn take_calib(&mut self) -> ::protobuf::RepeatedField<SSL_GeometryCameraCalibration> {
        ::std::mem::replace(&mut self.calib, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SSL_GeometryData {
    fn is_initialized(&self) -> bool {
        if self.field.is_none() {
            return false;
        }
        for v in &self.field {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.calib {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.calib)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.calib {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.calib {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryData {
        SSL_GeometryData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_GeometryFieldSize>>(
                    "field",
                    |m: &SSL_GeometryData| { &m.field },
                    |m: &mut SSL_GeometryData| { &mut m.field },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_GeometryCameraCalibration>>(
                    "calib",
                    |m: &SSL_GeometryData| { &m.calib },
                    |m: &mut SSL_GeometryData| { &mut m.calib },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_GeometryData>(
                    "SSL_GeometryData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_GeometryData {
        static mut instance: ::protobuf::lazy::Lazy<SSL_GeometryData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_GeometryData,
        };
        unsafe {
            instance.get(SSL_GeometryData::new)
        }
    }
}

impl ::protobuf::Clear for SSL_GeometryData {
    fn clear(&mut self) {
        self.field.clear();
        self.calib.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#messages_robocup_ssl_geometry.proto\"&\n\x08Vector2f\x12\x0c\n\x01x\
    \x18\x01\x20\x02(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x02(\x02R\x01y\"~\
    \n\x14SSL_FieldLineSegment\x12\x12\n\x04name\x18\x01\x20\x02(\tR\x04name\
    \x12\x19\n\x02p1\x18\x02\x20\x02(\x0b2\t.Vector2fR\x02p1\x12\x19\n\x02p2\
    \x18\x03\x20\x02(\x0b2\t.Vector2fR\x02p2\x12\x1c\n\tthickness\x18\x04\
    \x20\x02(\x02R\tthickness\"\xa2\x01\n\x13SSL_FieldCicularArc\x12\x12\n\
    \x04name\x18\x01\x20\x02(\tR\x04name\x12!\n\x06center\x18\x02\x20\x02(\
    \x0b2\t.Vector2fR\x06center\x12\x16\n\x06radius\x18\x03\x20\x02(\x02R\
    \x06radius\x12\x0e\n\x02a1\x18\x04\x20\x02(\x02R\x02a1\x12\x0e\n\x02a2\
    \x18\x05\x20\x02(\x02R\x02a2\x12\x1c\n\tthickness\x18\x06\x20\x02(\x02R\
    \tthickness\"\xad\x02\n\x15SSL_GeometryFieldSize\x12!\n\x0cfield_length\
    \x18\x01\x20\x02(\x05R\x0bfieldLength\x12\x1f\n\x0bfield_width\x18\x02\
    \x20\x02(\x05R\nfieldWidth\x12\x1d\n\ngoal_width\x18\x03\x20\x02(\x05R\t\
    goalWidth\x12\x1d\n\ngoal_depth\x18\x04\x20\x02(\x05R\tgoalDepth\x12%\n\
    \x0eboundary_width\x18\x05\x20\x02(\x05R\rboundaryWidth\x126\n\x0bfield_\
    lines\x18\x06\x20\x03(\x0b2\x15.SSL_FieldLineSegmentR\nfieldLines\x123\n\
    \nfield_arcs\x18\x07\x20\x03(\x0b2\x14.SSL_FieldCicularArcR\tfieldArcs\"\
    \xec\x03\n\x1dSSL_GeometryCameraCalibration\x12\x1b\n\tcamera_id\x18\x01\
    \x20\x02(\rR\x08cameraId\x12!\n\x0cfocal_length\x18\x02\x20\x02(\x02R\
    \x0bfocalLength\x12*\n\x11principal_point_x\x18\x03\x20\x02(\x02R\x0fpri\
    ncipalPointX\x12*\n\x11principal_point_y\x18\x04\x20\x02(\x02R\x0fprinci\
    palPointY\x12\x1e\n\ndistortion\x18\x05\x20\x02(\x02R\ndistortion\x12\
    \x0e\n\x02q0\x18\x06\x20\x02(\x02R\x02q0\x12\x0e\n\x02q1\x18\x07\x20\x02\
    (\x02R\x02q1\x12\x0e\n\x02q2\x18\x08\x20\x02(\x02R\x02q2\x12\x0e\n\x02q3\
    \x18\t\x20\x02(\x02R\x02q3\x12\x0e\n\x02tx\x18\n\x20\x02(\x02R\x02tx\x12\
    \x0e\n\x02ty\x18\x0b\x20\x02(\x02R\x02ty\x12\x0e\n\x02tz\x18\x0c\x20\x02\
    (\x02R\x02tz\x125\n\x17derived_camera_world_tx\x18\r\x20\x01(\x02R\x14de\
    rivedCameraWorldTx\x125\n\x17derived_camera_world_ty\x18\x0e\x20\x01(\
    \x02R\x14derivedCameraWorldTy\x125\n\x17derived_camera_world_tz\x18\x0f\
    \x20\x01(\x02R\x14derivedCameraWorldTz\"v\n\x10SSL_GeometryData\x12,\n\
    \x05field\x18\x01\x20\x02(\x0b2\x16.SSL_GeometryFieldSizeR\x05field\x124\
    \n\x05calib\x18\x02\x20\x03(\x0b2\x1e.SSL_GeometryCameraCalibrationR\x05\
    calibJ\xd0\x1a\n\x06\x12\x04\0\0F\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x20\n\x02\x04\0\x12\x04\x02\0\x05\x01\x1a\x14\x20A\x202D\x20float\x20ve\
    ctor.\n\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x10\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x03\x02\x17\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x03\x02\n\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\x03\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x03\x11\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x15\x16\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x02\x17\n\x0c\n\x05\x04\0\x02\x01\
    \x04\x12\x03\x04\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x04\x0b\x10\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\x11\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x04\x15\x16\n\x94\x02\n\x02\x04\x01\x12\x04\x0b\0\x14\
    \x01\x1a\x87\x02\x20Represents\x20a\x20field\x20marking\x20as\x20a\x20li\
    ne\x20segment\x20represented\x20by\x20a\x20start\x20point\x20p1,\n\x20an\
    d\x20end\x20point\x20p2,\x20and\x20a\x20line\x20thickness.\x20The\x20sta\
    rt\x20and\x20end\x20points\x20are\x20along\n\x20the\x20center\x20of\x20t\
    he\x20line,\x20so\x20the\x20thickness\x20of\x20the\x20line\x20extends\
    \x20by\x20thickness\x20/\x202\n\x20on\x20either\x20side\x20of\x20the\x20\
    line.\n\n\n\n\x03\x04\x01\x01\x12\x03\x0b\x08\x1c\n*\n\x04\x04\x01\x02\0\
    \x12\x03\r\x02\x1b\x1a\x1d\x20Name\x20of\x20this\x20field\x20marking.\n\
    \n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\r\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\r\x12\x16\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x19\x1a\n/\n\x04\x04\x01\x02\x01\
    \x12\x03\x0f\x02\x1b\x1a\"\x20Start\x20point\x20of\x20the\x20line\x20seg\
    ment.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x06\x12\x03\x0f\x0b\x13\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0f\x14\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\x19\x1a\
    \n-\n\x04\x04\x01\x02\x02\x12\x03\x11\x02\x1b\x1a\x20\x20End\x20point\
    \x20of\x20the\x20line\x20segment.\n\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\
    \x03\x11\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x11\x0b\x13\n\x0c\
    \n\x05\x04\x01\x02\x02\x01\x12\x03\x11\x14\x16\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x11\x19\x1a\n-\n\x04\x04\x01\x02\x03\x12\x03\x13\x02\
    \x1f\x1a\x20\x20Thickness\x20of\x20the\x20line\x20segment.\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x04\x12\x03\x13\x02\n\n\x0c\n\x05\x04\x01\x02\x03\x05\
    \x12\x03\x13\x0b\x10\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x13\x11\x1a\
    \n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x13\x1d\x1e\n\x94\x01\n\x02\x04\
    \x02\x12\x04\x18\0%\x01\x1a\x87\x01\x20Represents\x20a\x20field\x20marki\
    ng\x20as\x20a\x20circular\x20arc\x20segment\x20represented\x20by\x20cent\
    er\x20point,\x20a\n\x20start\x20angle,\x20an\x20end\x20angle,\x20and\x20\
    an\x20arc\x20thickness.\n\n\n\n\x03\x04\x02\x01\x12\x03\x18\x08\x1b\n*\n\
    \x04\x04\x02\x02\0\x12\x03\x1a\x02\x1b\x1a\x1d\x20Name\x20of\x20this\x20\
    field\x20marking.\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x1a\x02\n\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1a\x0b\x11\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x1a\x12\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1a\x19\
    \x1a\n0\n\x04\x04\x02\x02\x01\x12\x03\x1c\x02\x1f\x1a#\x20Center\x20poin\
    t\x20of\x20the\x20circular\x20arc.\n\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03\x1c\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1c\x0b\x13\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\x1c\x14\x1a\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x1c\x1d\x1e\n!\n\x04\x04\x02\x02\x02\x12\x03\x1e\x02\
    \x1c\x1a\x14\x20Radius\x20of\x20the\x20arc.\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x04\x12\x03\x1e\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1e\
    \x0b\x10\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1e\x11\x17\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x1e\x1a\x1b\n6\n\x04\x04\x02\x02\x03\x12\
    \x03\x20\x02\x18\x1a)\x20Start\x20angle\x20in\x20counter-clockwise\x20or\
    der.\n\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03\x20\x02\n\n\x0c\n\x05\x04\
    \x02\x02\x03\x05\x12\x03\x20\x0b\x10\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\
    \x03\x20\x11\x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x20\x16\x17\n4\
    \n\x04\x04\x02\x02\x04\x12\x03\"\x02\x18\x1a'\x20End\x20angle\x20in\x20c\
    ounter-clockwise\x20order.\n\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03\"\
    \x02\n\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\"\x0b\x10\n\x0c\n\x05\x04\
    \x02\x02\x04\x01\x12\x03\"\x11\x13\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\
    \x03\"\x16\x17\n$\n\x04\x04\x02\x02\x05\x12\x03$\x02\x1f\x1a\x17\x20Thic\
    kness\x20of\x20the\x20arc.\n\n\x0c\n\x05\x04\x02\x02\x05\x04\x12\x03$\
    \x02\n\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03$\x0b\x10\n\x0c\n\x05\x04\
    \x02\x02\x05\x01\x12\x03$\x11\x1a\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\
    \x03$\x1d\x1e\n\n\n\x02\x04\x03\x12\x04'\0/\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03'\x08\x1d\n\x0b\n\x04\x04\x03\x02\0\x12\x03(\x02\"\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03(\x02\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03(\
    \x0b\x10\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03(\x11\x1d\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03(\x20!\n\x0b\n\x04\x04\x03\x02\x01\x12\x03)\x02!\n\
    \x0c\n\x05\x04\x03\x02\x01\x04\x12\x03)\x02\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03)\x0b\x10\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03)\x11\
    \x1c\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03)\x1f\x20\n\x0b\n\x04\x04\
    \x03\x02\x02\x12\x03*\x02\x20\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03*\
    \x02\n\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03*\x0b\x10\n\x0c\n\x05\x04\
    \x03\x02\x02\x01\x12\x03*\x11\x1b\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\
    \x03*\x1e\x1f\n\x0b\n\x04\x04\x03\x02\x03\x12\x03+\x02\x20\n\x0c\n\x05\
    \x04\x03\x02\x03\x04\x12\x03+\x02\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\
    \x03+\x0b\x10\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03+\x11\x1b\n\x0c\n\
    \x05\x04\x03\x02\x03\x03\x12\x03+\x1e\x1f\n\x0b\n\x04\x04\x03\x02\x04\
    \x12\x03,\x02$\n\x0c\n\x05\x04\x03\x02\x04\x04\x12\x03,\x02\n\n\x0c\n\
    \x05\x04\x03\x02\x04\x05\x12\x03,\x0b\x10\n\x0c\n\x05\x04\x03\x02\x04\
    \x01\x12\x03,\x11\x1f\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03,\"#\n\x0b\
    \n\x04\x04\x03\x02\x05\x12\x03-\x020\n\x0c\n\x05\x04\x03\x02\x05\x04\x12\
    \x03-\x02\n\n\x0c\n\x05\x04\x03\x02\x05\x06\x12\x03-\x0b\x1f\n\x0c\n\x05\
    \x04\x03\x02\x05\x01\x12\x03-\x20+\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\
    \x03-./\n\x0b\n\x04\x04\x03\x02\x06\x12\x03.\x02.\n\x0c\n\x05\x04\x03\
    \x02\x06\x04\x12\x03.\x02\n\n\x0c\n\x05\x04\x03\x02\x06\x06\x12\x03.\x0b\
    \x1e\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03.\x1f)\n\x0c\n\x05\x04\x03\
    \x02\x06\x03\x12\x03.,-\n\n\n\x02\x04\x04\x12\x041\0A\x01\n\n\n\x03\x04\
    \x04\x01\x12\x031\x08%\n\x0b\n\x04\x04\x04\x02\0\x12\x032\x02$\n\x0c\n\
    \x05\x04\x04\x02\0\x04\x12\x032\x02\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\
    \x032\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x032\x12\x1b\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x032\"#\n\x0b\n\x04\x04\x04\x02\x01\x12\x033\x02\
    \"\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x033\x02\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x05\x12\x033\x0b\x10\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x033\
    \x11\x1d\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x033\x20!\n\x0b\n\x04\x04\
    \x04\x02\x02\x12\x034\x02'\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x034\x02\
    \n\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x034\x0b\x10\n\x0c\n\x05\x04\x04\
    \x02\x02\x01\x12\x034\x11\"\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x034%&\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x035\x02'\n\x0c\n\x05\x04\x04\x02\x03\x04\
    \x12\x035\x02\n\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x035\x0b\x10\n\x0c\n\
    \x05\x04\x04\x02\x03\x01\x12\x035\x11\"\n\x0c\n\x05\x04\x04\x02\x03\x03\
    \x12\x035%&\n\x0b\n\x04\x04\x04\x02\x04\x12\x036\x02\x20\n\x0c\n\x05\x04\
    \x04\x02\x04\x04\x12\x036\x02\n\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x036\
    \x0b\x10\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x036\x11\x1b\n\x0c\n\x05\
    \x04\x04\x02\x04\x03\x12\x036\x1e\x1f\n\x0b\n\x04\x04\x04\x02\x05\x12\
    \x037\x02\x18\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x037\x02\n\n\x0c\n\x05\
    \x04\x04\x02\x05\x05\x12\x037\x0b\x10\n\x0c\n\x05\x04\x04\x02\x05\x01\
    \x12\x037\x11\x13\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x037\x16\x17\n\x0b\
    \n\x04\x04\x04\x02\x06\x12\x038\x02\x18\n\x0c\n\x05\x04\x04\x02\x06\x04\
    \x12\x038\x02\n\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x038\x0b\x10\n\x0c\n\
    \x05\x04\x04\x02\x06\x01\x12\x038\x11\x13\n\x0c\n\x05\x04\x04\x02\x06\
    \x03\x12\x038\x16\x17\n\x0b\n\x04\x04\x04\x02\x07\x12\x039\x02\x18\n\x0c\
    \n\x05\x04\x04\x02\x07\x04\x12\x039\x02\n\n\x0c\n\x05\x04\x04\x02\x07\
    \x05\x12\x039\x0b\x10\n\x0c\n\x05\x04\x04\x02\x07\x01\x12\x039\x11\x13\n\
    \x0c\n\x05\x04\x04\x02\x07\x03\x12\x039\x16\x17\n\x0b\n\x04\x04\x04\x02\
    \x08\x12\x03:\x02\x18\n\x0c\n\x05\x04\x04\x02\x08\x04\x12\x03:\x02\n\n\
    \x0c\n\x05\x04\x04\x02\x08\x05\x12\x03:\x0b\x10\n\x0c\n\x05\x04\x04\x02\
    \x08\x01\x12\x03:\x11\x13\n\x0c\n\x05\x04\x04\x02\x08\x03\x12\x03:\x16\
    \x17\n\x0b\n\x04\x04\x04\x02\t\x12\x03;\x02\x19\n\x0c\n\x05\x04\x04\x02\
    \t\x04\x12\x03;\x02\n\n\x0c\n\x05\x04\x04\x02\t\x05\x12\x03;\x0b\x10\n\
    \x0c\n\x05\x04\x04\x02\t\x01\x12\x03;\x11\x13\n\x0c\n\x05\x04\x04\x02\t\
    \x03\x12\x03;\x16\x18\n\x0b\n\x04\x04\x04\x02\n\x12\x03<\x02\x19\n\x0c\n\
    \x05\x04\x04\x02\n\x04\x12\x03<\x02\n\n\x0c\n\x05\x04\x04\x02\n\x05\x12\
    \x03<\x0b\x10\n\x0c\n\x05\x04\x04\x02\n\x01\x12\x03<\x11\x13\n\x0c\n\x05\
    \x04\x04\x02\n\x03\x12\x03<\x16\x18\n\x0b\n\x04\x04\x04\x02\x0b\x12\x03=\
    \x02\x19\n\x0c\n\x05\x04\x04\x02\x0b\x04\x12\x03=\x02\n\n\x0c\n\x05\x04\
    \x04\x02\x0b\x05\x12\x03=\x0b\x10\n\x0c\n\x05\x04\x04\x02\x0b\x01\x12\
    \x03=\x11\x13\n\x0c\n\x05\x04\x04\x02\x0b\x03\x12\x03=\x16\x18\n\x0b\n\
    \x04\x04\x04\x02\x0c\x12\x03>\x02.\n\x0c\n\x05\x04\x04\x02\x0c\x04\x12\
    \x03>\x02\n\n\x0c\n\x05\x04\x04\x02\x0c\x05\x12\x03>\x0b\x10\n\x0c\n\x05\
    \x04\x04\x02\x0c\x01\x12\x03>\x11(\n\x0c\n\x05\x04\x04\x02\x0c\x03\x12\
    \x03>+-\n\x0b\n\x04\x04\x04\x02\r\x12\x03?\x02.\n\x0c\n\x05\x04\x04\x02\
    \r\x04\x12\x03?\x02\n\n\x0c\n\x05\x04\x04\x02\r\x05\x12\x03?\x0b\x10\n\
    \x0c\n\x05\x04\x04\x02\r\x01\x12\x03?\x11(\n\x0c\n\x05\x04\x04\x02\r\x03\
    \x12\x03?+-\n\x0b\n\x04\x04\x04\x02\x0e\x12\x03@\x02.\n\x0c\n\x05\x04\
    \x04\x02\x0e\x04\x12\x03@\x02\n\n\x0c\n\x05\x04\x04\x02\x0e\x05\x12\x03@\
    \x0b\x10\n\x0c\n\x05\x04\x04\x02\x0e\x01\x12\x03@\x11(\n\x0c\n\x05\x04\
    \x04\x02\x0e\x03\x12\x03@+-\n\n\n\x02\x04\x05\x12\x04C\0F\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03C\x08\x18\n\x0b\n\x04\x04\x05\x02\0\x12\x03D\x02+\n\
    \x0c\n\x05\x04\x05\x02\0\x04\x12\x03D\x02\n\n\x0c\n\x05\x04\x05\x02\0\
    \x06\x12\x03D\x0b\x20\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03D!&\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03D)*\n\x0b\n\x04\x04\x05\x02\x01\x12\x03E\
    \x023\n\x0c\n\x05\x04\x05\x02\x01\x04\x12\x03E\x02\n\n\x0c\n\x05\x04\x05\
    \x02\x01\x06\x12\x03E\x0b(\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03E).\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03E12\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
