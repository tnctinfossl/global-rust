// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages_robocup_ssl_detection.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct SSL_DetectionBall {
    // message fields
    confidence: ::std::option::Option<f32>,
    area: ::std::option::Option<u32>,
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    z: ::std::option::Option<f32>,
    pixel_x: ::std::option::Option<f32>,
    pixel_y: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_DetectionBall {
    fn default() -> &'a SSL_DetectionBall {
        <SSL_DetectionBall as ::protobuf::Message>::default_instance()
    }
}

impl SSL_DetectionBall {
    pub fn new() -> SSL_DetectionBall {
        ::std::default::Default::default()
    }

    // required float confidence = 1;


    pub fn get_confidence(&self) -> f32 {
        self.confidence.unwrap_or(0.)
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = ::std::option::Option::None;
    }

    pub fn has_confidence(&self) -> bool {
        self.confidence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = ::std::option::Option::Some(v);
    }

    // optional uint32 area = 2;


    pub fn get_area(&self) -> u32 {
        self.area.unwrap_or(0)
    }
    pub fn clear_area(&mut self) {
        self.area = ::std::option::Option::None;
    }

    pub fn has_area(&self) -> bool {
        self.area.is_some()
    }

    // Param is passed by value, moved
    pub fn set_area(&mut self, v: u32) {
        self.area = ::std::option::Option::Some(v);
    }

    // required float x = 3;


    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required float y = 4;


    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional float z = 5;


    pub fn get_z(&self) -> f32 {
        self.z.unwrap_or(0.)
    }
    pub fn clear_z(&mut self) {
        self.z = ::std::option::Option::None;
    }

    pub fn has_z(&self) -> bool {
        self.z.is_some()
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: f32) {
        self.z = ::std::option::Option::Some(v);
    }

    // required float pixel_x = 6;


    pub fn get_pixel_x(&self) -> f32 {
        self.pixel_x.unwrap_or(0.)
    }
    pub fn clear_pixel_x(&mut self) {
        self.pixel_x = ::std::option::Option::None;
    }

    pub fn has_pixel_x(&self) -> bool {
        self.pixel_x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pixel_x(&mut self, v: f32) {
        self.pixel_x = ::std::option::Option::Some(v);
    }

    // required float pixel_y = 7;


    pub fn get_pixel_y(&self) -> f32 {
        self.pixel_y.unwrap_or(0.)
    }
    pub fn clear_pixel_y(&mut self) {
        self.pixel_y = ::std::option::Option::None;
    }

    pub fn has_pixel_y(&self) -> bool {
        self.pixel_y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pixel_y(&mut self, v: f32) {
        self.pixel_y = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_DetectionBall {
    fn is_initialized(&self) -> bool {
        if self.confidence.is_none() {
            return false;
        }
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        if self.pixel_x.is_none() {
            return false;
        }
        if self.pixel_y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.area = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.z = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pixel_x = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pixel_y = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.confidence {
            my_size += 5;
        }
        if let Some(v) = self.area {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.x {
            my_size += 5;
        }
        if let Some(v) = self.y {
            my_size += 5;
        }
        if let Some(v) = self.z {
            my_size += 5;
        }
        if let Some(v) = self.pixel_x {
            my_size += 5;
        }
        if let Some(v) = self.pixel_y {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.confidence {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.area {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.x {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.y {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.z {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.pixel_x {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.pixel_y {
            os.write_float(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_DetectionBall {
        SSL_DetectionBall::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "confidence",
                    |m: &SSL_DetectionBall| { &m.confidence },
                    |m: &mut SSL_DetectionBall| { &mut m.confidence },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "area",
                    |m: &SSL_DetectionBall| { &m.area },
                    |m: &mut SSL_DetectionBall| { &mut m.area },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &SSL_DetectionBall| { &m.x },
                    |m: &mut SSL_DetectionBall| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &SSL_DetectionBall| { &m.y },
                    |m: &mut SSL_DetectionBall| { &mut m.y },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "z",
                    |m: &SSL_DetectionBall| { &m.z },
                    |m: &mut SSL_DetectionBall| { &mut m.z },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pixel_x",
                    |m: &SSL_DetectionBall| { &m.pixel_x },
                    |m: &mut SSL_DetectionBall| { &mut m.pixel_x },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pixel_y",
                    |m: &SSL_DetectionBall| { &m.pixel_y },
                    |m: &mut SSL_DetectionBall| { &mut m.pixel_y },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_DetectionBall>(
                    "SSL_DetectionBall",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_DetectionBall {
        static mut instance: ::protobuf::lazy::Lazy<SSL_DetectionBall> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_DetectionBall,
        };
        unsafe {
            instance.get(SSL_DetectionBall::new)
        }
    }
}

impl ::protobuf::Clear for SSL_DetectionBall {
    fn clear(&mut self) {
        self.confidence = ::std::option::Option::None;
        self.area = ::std::option::Option::None;
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.z = ::std::option::Option::None;
        self.pixel_x = ::std::option::Option::None;
        self.pixel_y = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_DetectionBall {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_DetectionBall {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_DetectionRobot {
    // message fields
    confidence: ::std::option::Option<f32>,
    robot_id: ::std::option::Option<u32>,
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    orientation: ::std::option::Option<f32>,
    pixel_x: ::std::option::Option<f32>,
    pixel_y: ::std::option::Option<f32>,
    height: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_DetectionRobot {
    fn default() -> &'a SSL_DetectionRobot {
        <SSL_DetectionRobot as ::protobuf::Message>::default_instance()
    }
}

impl SSL_DetectionRobot {
    pub fn new() -> SSL_DetectionRobot {
        ::std::default::Default::default()
    }

    // required float confidence = 1;


    pub fn get_confidence(&self) -> f32 {
        self.confidence.unwrap_or(0.)
    }
    pub fn clear_confidence(&mut self) {
        self.confidence = ::std::option::Option::None;
    }

    pub fn has_confidence(&self) -> bool {
        self.confidence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_confidence(&mut self, v: f32) {
        self.confidence = ::std::option::Option::Some(v);
    }

    // optional uint32 robot_id = 2;


    pub fn get_robot_id(&self) -> u32 {
        self.robot_id.unwrap_or(0)
    }
    pub fn clear_robot_id(&mut self) {
        self.robot_id = ::std::option::Option::None;
    }

    pub fn has_robot_id(&self) -> bool {
        self.robot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_robot_id(&mut self, v: u32) {
        self.robot_id = ::std::option::Option::Some(v);
    }

    // required float x = 3;


    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required float y = 4;


    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional float orientation = 5;


    pub fn get_orientation(&self) -> f32 {
        self.orientation.unwrap_or(0.)
    }
    pub fn clear_orientation(&mut self) {
        self.orientation = ::std::option::Option::None;
    }

    pub fn has_orientation(&self) -> bool {
        self.orientation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orientation(&mut self, v: f32) {
        self.orientation = ::std::option::Option::Some(v);
    }

    // required float pixel_x = 6;


    pub fn get_pixel_x(&self) -> f32 {
        self.pixel_x.unwrap_or(0.)
    }
    pub fn clear_pixel_x(&mut self) {
        self.pixel_x = ::std::option::Option::None;
    }

    pub fn has_pixel_x(&self) -> bool {
        self.pixel_x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pixel_x(&mut self, v: f32) {
        self.pixel_x = ::std::option::Option::Some(v);
    }

    // required float pixel_y = 7;


    pub fn get_pixel_y(&self) -> f32 {
        self.pixel_y.unwrap_or(0.)
    }
    pub fn clear_pixel_y(&mut self) {
        self.pixel_y = ::std::option::Option::None;
    }

    pub fn has_pixel_y(&self) -> bool {
        self.pixel_y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pixel_y(&mut self, v: f32) {
        self.pixel_y = ::std::option::Option::Some(v);
    }

    // optional float height = 8;


    pub fn get_height(&self) -> f32 {
        self.height.unwrap_or(0.)
    }
    pub fn clear_height(&mut self) {
        self.height = ::std::option::Option::None;
    }

    pub fn has_height(&self) -> bool {
        self.height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: f32) {
        self.height = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_DetectionRobot {
    fn is_initialized(&self) -> bool {
        if self.confidence.is_none() {
            return false;
        }
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        if self.pixel_x.is_none() {
            return false;
        }
        if self.pixel_y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.confidence = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.robot_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.orientation = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pixel_x = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pixel_y = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.height = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.confidence {
            my_size += 5;
        }
        if let Some(v) = self.robot_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.x {
            my_size += 5;
        }
        if let Some(v) = self.y {
            my_size += 5;
        }
        if let Some(v) = self.orientation {
            my_size += 5;
        }
        if let Some(v) = self.pixel_x {
            my_size += 5;
        }
        if let Some(v) = self.pixel_y {
            my_size += 5;
        }
        if let Some(v) = self.height {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.confidence {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.robot_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.x {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.y {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.orientation {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.pixel_x {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.pixel_y {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.height {
            os.write_float(8, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_DetectionRobot {
        SSL_DetectionRobot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "confidence",
                    |m: &SSL_DetectionRobot| { &m.confidence },
                    |m: &mut SSL_DetectionRobot| { &mut m.confidence },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "robot_id",
                    |m: &SSL_DetectionRobot| { &m.robot_id },
                    |m: &mut SSL_DetectionRobot| { &mut m.robot_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &SSL_DetectionRobot| { &m.x },
                    |m: &mut SSL_DetectionRobot| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &SSL_DetectionRobot| { &m.y },
                    |m: &mut SSL_DetectionRobot| { &mut m.y },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "orientation",
                    |m: &SSL_DetectionRobot| { &m.orientation },
                    |m: &mut SSL_DetectionRobot| { &mut m.orientation },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pixel_x",
                    |m: &SSL_DetectionRobot| { &m.pixel_x },
                    |m: &mut SSL_DetectionRobot| { &mut m.pixel_x },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pixel_y",
                    |m: &SSL_DetectionRobot| { &m.pixel_y },
                    |m: &mut SSL_DetectionRobot| { &mut m.pixel_y },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "height",
                    |m: &SSL_DetectionRobot| { &m.height },
                    |m: &mut SSL_DetectionRobot| { &mut m.height },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_DetectionRobot>(
                    "SSL_DetectionRobot",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_DetectionRobot {
        static mut instance: ::protobuf::lazy::Lazy<SSL_DetectionRobot> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_DetectionRobot,
        };
        unsafe {
            instance.get(SSL_DetectionRobot::new)
        }
    }
}

impl ::protobuf::Clear for SSL_DetectionRobot {
    fn clear(&mut self) {
        self.confidence = ::std::option::Option::None;
        self.robot_id = ::std::option::Option::None;
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.orientation = ::std::option::Option::None;
        self.pixel_x = ::std::option::Option::None;
        self.pixel_y = ::std::option::Option::None;
        self.height = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_DetectionRobot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_DetectionRobot {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_DetectionFrame {
    // message fields
    frame_number: ::std::option::Option<u32>,
    t_capture: ::std::option::Option<f64>,
    t_sent: ::std::option::Option<f64>,
    camera_id: ::std::option::Option<u32>,
    balls: ::protobuf::RepeatedField<SSL_DetectionBall>,
    robots_yellow: ::protobuf::RepeatedField<SSL_DetectionRobot>,
    robots_blue: ::protobuf::RepeatedField<SSL_DetectionRobot>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_DetectionFrame {
    fn default() -> &'a SSL_DetectionFrame {
        <SSL_DetectionFrame as ::protobuf::Message>::default_instance()
    }
}

impl SSL_DetectionFrame {
    pub fn new() -> SSL_DetectionFrame {
        ::std::default::Default::default()
    }

    // required uint32 frame_number = 1;


    pub fn get_frame_number(&self) -> u32 {
        self.frame_number.unwrap_or(0)
    }
    pub fn clear_frame_number(&mut self) {
        self.frame_number = ::std::option::Option::None;
    }

    pub fn has_frame_number(&self) -> bool {
        self.frame_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frame_number(&mut self, v: u32) {
        self.frame_number = ::std::option::Option::Some(v);
    }

    // required double t_capture = 2;


    pub fn get_t_capture(&self) -> f64 {
        self.t_capture.unwrap_or(0.)
    }
    pub fn clear_t_capture(&mut self) {
        self.t_capture = ::std::option::Option::None;
    }

    pub fn has_t_capture(&self) -> bool {
        self.t_capture.is_some()
    }

    // Param is passed by value, moved
    pub fn set_t_capture(&mut self, v: f64) {
        self.t_capture = ::std::option::Option::Some(v);
    }

    // required double t_sent = 3;


    pub fn get_t_sent(&self) -> f64 {
        self.t_sent.unwrap_or(0.)
    }
    pub fn clear_t_sent(&mut self) {
        self.t_sent = ::std::option::Option::None;
    }

    pub fn has_t_sent(&self) -> bool {
        self.t_sent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_t_sent(&mut self, v: f64) {
        self.t_sent = ::std::option::Option::Some(v);
    }

    // required uint32 camera_id = 4;


    pub fn get_camera_id(&self) -> u32 {
        self.camera_id.unwrap_or(0)
    }
    pub fn clear_camera_id(&mut self) {
        self.camera_id = ::std::option::Option::None;
    }

    pub fn has_camera_id(&self) -> bool {
        self.camera_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_camera_id(&mut self, v: u32) {
        self.camera_id = ::std::option::Option::Some(v);
    }

    // repeated .SSL_DetectionBall balls = 5;


    pub fn get_balls(&self) -> &[SSL_DetectionBall] {
        &self.balls
    }
    pub fn clear_balls(&mut self) {
        self.balls.clear();
    }

    // Param is passed by value, moved
    pub fn set_balls(&mut self, v: ::protobuf::RepeatedField<SSL_DetectionBall>) {
        self.balls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_balls(&mut self) -> &mut ::protobuf::RepeatedField<SSL_DetectionBall> {
        &mut self.balls
    }

    // Take field
    pub fn take_balls(&mut self) -> ::protobuf::RepeatedField<SSL_DetectionBall> {
        ::std::mem::replace(&mut self.balls, ::protobuf::RepeatedField::new())
    }

    // repeated .SSL_DetectionRobot robots_yellow = 6;


    pub fn get_robots_yellow(&self) -> &[SSL_DetectionRobot] {
        &self.robots_yellow
    }
    pub fn clear_robots_yellow(&mut self) {
        self.robots_yellow.clear();
    }

    // Param is passed by value, moved
    pub fn set_robots_yellow(&mut self, v: ::protobuf::RepeatedField<SSL_DetectionRobot>) {
        self.robots_yellow = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robots_yellow(&mut self) -> &mut ::protobuf::RepeatedField<SSL_DetectionRobot> {
        &mut self.robots_yellow
    }

    // Take field
    pub fn take_robots_yellow(&mut self) -> ::protobuf::RepeatedField<SSL_DetectionRobot> {
        ::std::mem::replace(&mut self.robots_yellow, ::protobuf::RepeatedField::new())
    }

    // repeated .SSL_DetectionRobot robots_blue = 7;


    pub fn get_robots_blue(&self) -> &[SSL_DetectionRobot] {
        &self.robots_blue
    }
    pub fn clear_robots_blue(&mut self) {
        self.robots_blue.clear();
    }

    // Param is passed by value, moved
    pub fn set_robots_blue(&mut self, v: ::protobuf::RepeatedField<SSL_DetectionRobot>) {
        self.robots_blue = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robots_blue(&mut self) -> &mut ::protobuf::RepeatedField<SSL_DetectionRobot> {
        &mut self.robots_blue
    }

    // Take field
    pub fn take_robots_blue(&mut self) -> ::protobuf::RepeatedField<SSL_DetectionRobot> {
        ::std::mem::replace(&mut self.robots_blue, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SSL_DetectionFrame {
    fn is_initialized(&self) -> bool {
        if self.frame_number.is_none() {
            return false;
        }
        if self.t_capture.is_none() {
            return false;
        }
        if self.t_sent.is_none() {
            return false;
        }
        if self.camera_id.is_none() {
            return false;
        }
        for v in &self.balls {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.robots_yellow {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.robots_blue {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frame_number = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.t_capture = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.t_sent = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.camera_id = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.balls)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robots_yellow)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robots_blue)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.frame_number {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.t_capture {
            my_size += 9;
        }
        if let Some(v) = self.t_sent {
            my_size += 9;
        }
        if let Some(v) = self.camera_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.balls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.robots_yellow {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.robots_blue {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.frame_number {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.t_capture {
            os.write_double(2, v)?;
        }
        if let Some(v) = self.t_sent {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.camera_id {
            os.write_uint32(4, v)?;
        }
        for v in &self.balls {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.robots_yellow {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.robots_blue {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_DetectionFrame {
        SSL_DetectionFrame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frame_number",
                    |m: &SSL_DetectionFrame| { &m.frame_number },
                    |m: &mut SSL_DetectionFrame| { &mut m.frame_number },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "t_capture",
                    |m: &SSL_DetectionFrame| { &m.t_capture },
                    |m: &mut SSL_DetectionFrame| { &mut m.t_capture },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "t_sent",
                    |m: &SSL_DetectionFrame| { &m.t_sent },
                    |m: &mut SSL_DetectionFrame| { &mut m.t_sent },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "camera_id",
                    |m: &SSL_DetectionFrame| { &m.camera_id },
                    |m: &mut SSL_DetectionFrame| { &mut m.camera_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_DetectionBall>>(
                    "balls",
                    |m: &SSL_DetectionFrame| { &m.balls },
                    |m: &mut SSL_DetectionFrame| { &mut m.balls },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_DetectionRobot>>(
                    "robots_yellow",
                    |m: &SSL_DetectionFrame| { &m.robots_yellow },
                    |m: &mut SSL_DetectionFrame| { &mut m.robots_yellow },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_DetectionRobot>>(
                    "robots_blue",
                    |m: &SSL_DetectionFrame| { &m.robots_blue },
                    |m: &mut SSL_DetectionFrame| { &mut m.robots_blue },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_DetectionFrame>(
                    "SSL_DetectionFrame",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_DetectionFrame {
        static mut instance: ::protobuf::lazy::Lazy<SSL_DetectionFrame> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_DetectionFrame,
        };
        unsafe {
            instance.get(SSL_DetectionFrame::new)
        }
    }
}

impl ::protobuf::Clear for SSL_DetectionFrame {
    fn clear(&mut self) {
        self.frame_number = ::std::option::Option::None;
        self.t_capture = ::std::option::Option::None;
        self.t_sent = ::std::option::Option::None;
        self.camera_id = ::std::option::Option::None;
        self.balls.clear();
        self.robots_yellow.clear();
        self.robots_blue.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_DetectionFrame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_DetectionFrame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$messages_robocup_ssl_detection.proto\"\xa3\x01\n\x11SSL_DetectionBall\
    \x12\x1e\n\nconfidence\x18\x01\x20\x02(\x02R\nconfidence\x12\x12\n\x04ar\
    ea\x18\x02\x20\x01(\rR\x04area\x12\x0c\n\x01x\x18\x03\x20\x02(\x02R\x01x\
    \x12\x0c\n\x01y\x18\x04\x20\x02(\x02R\x01y\x12\x0c\n\x01z\x18\x05\x20\
    \x01(\x02R\x01z\x12\x17\n\x07pixel_x\x18\x06\x20\x02(\x02R\x06pixelX\x12\
    \x17\n\x07pixel_y\x18\x07\x20\x02(\x02R\x06pixelY\"\xd7\x01\n\x12SSL_Det\
    ectionRobot\x12\x1e\n\nconfidence\x18\x01\x20\x02(\x02R\nconfidence\x12\
    \x19\n\x08robot_id\x18\x02\x20\x01(\rR\x07robotId\x12\x0c\n\x01x\x18\x03\
    \x20\x02(\x02R\x01x\x12\x0c\n\x01y\x18\x04\x20\x02(\x02R\x01y\x12\x20\n\
    \x0borientation\x18\x05\x20\x01(\x02R\x0borientation\x12\x17\n\x07pixel_\
    x\x18\x06\x20\x02(\x02R\x06pixelX\x12\x17\n\x07pixel_y\x18\x07\x20\x02(\
    \x02R\x06pixelY\x12\x16\n\x06height\x18\x08\x20\x01(\x02R\x06height\"\
    \xa2\x02\n\x12SSL_DetectionFrame\x12!\n\x0cframe_number\x18\x01\x20\x02(\
    \rR\x0bframeNumber\x12\x1b\n\tt_capture\x18\x02\x20\x02(\x01R\x08tCaptur\
    e\x12\x15\n\x06t_sent\x18\x03\x20\x02(\x01R\x05tSent\x12\x1b\n\tcamera_i\
    d\x18\x04\x20\x02(\rR\x08cameraId\x12(\n\x05balls\x18\x05\x20\x03(\x0b2\
    \x12.SSL_DetectionBallR\x05balls\x128\n\rrobots_yellow\x18\x06\x20\x03(\
    \x0b2\x13.SSL_DetectionRobotR\x0crobotsYellow\x124\n\x0brobots_blue\x18\
    \x07\x20\x03(\x0b2\x13.SSL_DetectionRobotR\nrobotsBlue\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
