// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `referee.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct SSL_Referee {
    // message fields
    packet_timestamp: ::std::option::Option<u64>,
    stage: ::std::option::Option<SSL_Referee_Stage>,
    stage_time_left: ::std::option::Option<i32>,
    command: ::std::option::Option<SSL_Referee_Command>,
    command_counter: ::std::option::Option<u32>,
    command_timestamp: ::std::option::Option<u64>,
    yellow: ::protobuf::SingularPtrField<SSL_Referee_TeamInfo>,
    blue: ::protobuf::SingularPtrField<SSL_Referee_TeamInfo>,
    designated_position: ::protobuf::SingularPtrField<SSL_Referee_Point>,
    blueTeamOnPositiveHalf: ::std::option::Option<bool>,
    gameEvent: ::protobuf::SingularPtrField<super::game_event::SSL_Referee_Game_Event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_Referee {
    fn default() -> &'a SSL_Referee {
        <SSL_Referee as ::protobuf::Message>::default_instance()
    }
}

impl SSL_Referee {
    pub fn new() -> SSL_Referee {
        ::std::default::Default::default()
    }

    // required uint64 packet_timestamp = 1;


    pub fn get_packet_timestamp(&self) -> u64 {
        self.packet_timestamp.unwrap_or(0)
    }
    pub fn clear_packet_timestamp(&mut self) {
        self.packet_timestamp = ::std::option::Option::None;
    }

    pub fn has_packet_timestamp(&self) -> bool {
        self.packet_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_packet_timestamp(&mut self, v: u64) {
        self.packet_timestamp = ::std::option::Option::Some(v);
    }

    // required .SSL_Referee.Stage stage = 2;


    pub fn get_stage(&self) -> SSL_Referee_Stage {
        self.stage.unwrap_or(SSL_Referee_Stage::NORMAL_FIRST_HALF_PRE)
    }
    pub fn clear_stage(&mut self) {
        self.stage = ::std::option::Option::None;
    }

    pub fn has_stage(&self) -> bool {
        self.stage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stage(&mut self, v: SSL_Referee_Stage) {
        self.stage = ::std::option::Option::Some(v);
    }

    // optional sint32 stage_time_left = 3;


    pub fn get_stage_time_left(&self) -> i32 {
        self.stage_time_left.unwrap_or(0)
    }
    pub fn clear_stage_time_left(&mut self) {
        self.stage_time_left = ::std::option::Option::None;
    }

    pub fn has_stage_time_left(&self) -> bool {
        self.stage_time_left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stage_time_left(&mut self, v: i32) {
        self.stage_time_left = ::std::option::Option::Some(v);
    }

    // required .SSL_Referee.Command command = 4;


    pub fn get_command(&self) -> SSL_Referee_Command {
        self.command.unwrap_or(SSL_Referee_Command::HALT)
    }
    pub fn clear_command(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_command(&self) -> bool {
        self.command.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: SSL_Referee_Command) {
        self.command = ::std::option::Option::Some(v);
    }

    // required uint32 command_counter = 5;


    pub fn get_command_counter(&self) -> u32 {
        self.command_counter.unwrap_or(0)
    }
    pub fn clear_command_counter(&mut self) {
        self.command_counter = ::std::option::Option::None;
    }

    pub fn has_command_counter(&self) -> bool {
        self.command_counter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_counter(&mut self, v: u32) {
        self.command_counter = ::std::option::Option::Some(v);
    }

    // required uint64 command_timestamp = 6;


    pub fn get_command_timestamp(&self) -> u64 {
        self.command_timestamp.unwrap_or(0)
    }
    pub fn clear_command_timestamp(&mut self) {
        self.command_timestamp = ::std::option::Option::None;
    }

    pub fn has_command_timestamp(&self) -> bool {
        self.command_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_timestamp(&mut self, v: u64) {
        self.command_timestamp = ::std::option::Option::Some(v);
    }

    // required .SSL_Referee.TeamInfo yellow = 7;


    pub fn get_yellow(&self) -> &SSL_Referee_TeamInfo {
        self.yellow.as_ref().unwrap_or_else(|| SSL_Referee_TeamInfo::default_instance())
    }
    pub fn clear_yellow(&mut self) {
        self.yellow.clear();
    }

    pub fn has_yellow(&self) -> bool {
        self.yellow.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yellow(&mut self, v: SSL_Referee_TeamInfo) {
        self.yellow = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_yellow(&mut self) -> &mut SSL_Referee_TeamInfo {
        if self.yellow.is_none() {
            self.yellow.set_default();
        }
        self.yellow.as_mut().unwrap()
    }

    // Take field
    pub fn take_yellow(&mut self) -> SSL_Referee_TeamInfo {
        self.yellow.take().unwrap_or_else(|| SSL_Referee_TeamInfo::new())
    }

    // required .SSL_Referee.TeamInfo blue = 8;


    pub fn get_blue(&self) -> &SSL_Referee_TeamInfo {
        self.blue.as_ref().unwrap_or_else(|| SSL_Referee_TeamInfo::default_instance())
    }
    pub fn clear_blue(&mut self) {
        self.blue.clear();
    }

    pub fn has_blue(&self) -> bool {
        self.blue.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blue(&mut self, v: SSL_Referee_TeamInfo) {
        self.blue = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blue(&mut self) -> &mut SSL_Referee_TeamInfo {
        if self.blue.is_none() {
            self.blue.set_default();
        }
        self.blue.as_mut().unwrap()
    }

    // Take field
    pub fn take_blue(&mut self) -> SSL_Referee_TeamInfo {
        self.blue.take().unwrap_or_else(|| SSL_Referee_TeamInfo::new())
    }

    // optional .SSL_Referee.Point designated_position = 9;


    pub fn get_designated_position(&self) -> &SSL_Referee_Point {
        self.designated_position.as_ref().unwrap_or_else(|| SSL_Referee_Point::default_instance())
    }
    pub fn clear_designated_position(&mut self) {
        self.designated_position.clear();
    }

    pub fn has_designated_position(&self) -> bool {
        self.designated_position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_designated_position(&mut self, v: SSL_Referee_Point) {
        self.designated_position = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_designated_position(&mut self) -> &mut SSL_Referee_Point {
        if self.designated_position.is_none() {
            self.designated_position.set_default();
        }
        self.designated_position.as_mut().unwrap()
    }

    // Take field
    pub fn take_designated_position(&mut self) -> SSL_Referee_Point {
        self.designated_position.take().unwrap_or_else(|| SSL_Referee_Point::new())
    }

    // optional bool blueTeamOnPositiveHalf = 10;


    pub fn get_blueTeamOnPositiveHalf(&self) -> bool {
        self.blueTeamOnPositiveHalf.unwrap_or(false)
    }
    pub fn clear_blueTeamOnPositiveHalf(&mut self) {
        self.blueTeamOnPositiveHalf = ::std::option::Option::None;
    }

    pub fn has_blueTeamOnPositiveHalf(&self) -> bool {
        self.blueTeamOnPositiveHalf.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blueTeamOnPositiveHalf(&mut self, v: bool) {
        self.blueTeamOnPositiveHalf = ::std::option::Option::Some(v);
    }

    // optional .SSL_Referee_Game_Event gameEvent = 11;


    pub fn get_gameEvent(&self) -> &super::game_event::SSL_Referee_Game_Event {
        self.gameEvent.as_ref().unwrap_or_else(|| super::game_event::SSL_Referee_Game_Event::default_instance())
    }
    pub fn clear_gameEvent(&mut self) {
        self.gameEvent.clear();
    }

    pub fn has_gameEvent(&self) -> bool {
        self.gameEvent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameEvent(&mut self, v: super::game_event::SSL_Referee_Game_Event) {
        self.gameEvent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gameEvent(&mut self) -> &mut super::game_event::SSL_Referee_Game_Event {
        if self.gameEvent.is_none() {
            self.gameEvent.set_default();
        }
        self.gameEvent.as_mut().unwrap()
    }

    // Take field
    pub fn take_gameEvent(&mut self) -> super::game_event::SSL_Referee_Game_Event {
        self.gameEvent.take().unwrap_or_else(|| super::game_event::SSL_Referee_Game_Event::new())
    }
}

impl ::protobuf::Message for SSL_Referee {
    fn is_initialized(&self) -> bool {
        if self.packet_timestamp.is_none() {
            return false;
        }
        if self.stage.is_none() {
            return false;
        }
        if self.command.is_none() {
            return false;
        }
        if self.command_counter.is_none() {
            return false;
        }
        if self.command_timestamp.is_none() {
            return false;
        }
        if self.yellow.is_none() {
            return false;
        }
        if self.blue.is_none() {
            return false;
        }
        for v in &self.yellow {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.blue {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.designated_position {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gameEvent {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.packet_timestamp = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.stage, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.stage_time_left = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.command, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.command_counter = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.command_timestamp = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.yellow)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.blue)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.designated_position)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.blueTeamOnPositiveHalf = ::std::option::Option::Some(tmp);
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gameEvent)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.packet_timestamp {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.stage {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.stage_time_left {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        if let Some(v) = self.command {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(v) = self.command_counter {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.command_timestamp {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.yellow.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.blue.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.designated_position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.blueTeamOnPositiveHalf {
            my_size += 2;
        }
        if let Some(ref v) = self.gameEvent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.packet_timestamp {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.stage {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.stage_time_left {
            os.write_sint32(3, v)?;
        }
        if let Some(v) = self.command {
            os.write_enum(4, v.value())?;
        }
        if let Some(v) = self.command_counter {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.command_timestamp {
            os.write_uint64(6, v)?;
        }
        if let Some(ref v) = self.yellow.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.blue.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.designated_position.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.blueTeamOnPositiveHalf {
            os.write_bool(10, v)?;
        }
        if let Some(ref v) = self.gameEvent.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_Referee {
        SSL_Referee::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "packet_timestamp",
                    |m: &SSL_Referee| { &m.packet_timestamp },
                    |m: &mut SSL_Referee| { &mut m.packet_timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SSL_Referee_Stage>>(
                    "stage",
                    |m: &SSL_Referee| { &m.stage },
                    |m: &mut SSL_Referee| { &mut m.stage },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "stage_time_left",
                    |m: &SSL_Referee| { &m.stage_time_left },
                    |m: &mut SSL_Referee| { &mut m.stage_time_left },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SSL_Referee_Command>>(
                    "command",
                    |m: &SSL_Referee| { &m.command },
                    |m: &mut SSL_Referee| { &mut m.command },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "command_counter",
                    |m: &SSL_Referee| { &m.command_counter },
                    |m: &mut SSL_Referee| { &mut m.command_counter },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "command_timestamp",
                    |m: &SSL_Referee| { &m.command_timestamp },
                    |m: &mut SSL_Referee| { &mut m.command_timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_Referee_TeamInfo>>(
                    "yellow",
                    |m: &SSL_Referee| { &m.yellow },
                    |m: &mut SSL_Referee| { &mut m.yellow },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_Referee_TeamInfo>>(
                    "blue",
                    |m: &SSL_Referee| { &m.blue },
                    |m: &mut SSL_Referee| { &mut m.blue },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_Referee_Point>>(
                    "designated_position",
                    |m: &SSL_Referee| { &m.designated_position },
                    |m: &mut SSL_Referee| { &mut m.designated_position },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "blueTeamOnPositiveHalf",
                    |m: &SSL_Referee| { &m.blueTeamOnPositiveHalf },
                    |m: &mut SSL_Referee| { &mut m.blueTeamOnPositiveHalf },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::game_event::SSL_Referee_Game_Event>>(
                    "gameEvent",
                    |m: &SSL_Referee| { &m.gameEvent },
                    |m: &mut SSL_Referee| { &mut m.gameEvent },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_Referee>(
                    "SSL_Referee",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_Referee {
        static mut instance: ::protobuf::lazy::Lazy<SSL_Referee> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_Referee,
        };
        unsafe {
            instance.get(SSL_Referee::new)
        }
    }
}

impl ::protobuf::Clear for SSL_Referee {
    fn clear(&mut self) {
        self.packet_timestamp = ::std::option::Option::None;
        self.stage = ::std::option::Option::None;
        self.stage_time_left = ::std::option::Option::None;
        self.command = ::std::option::Option::None;
        self.command_counter = ::std::option::Option::None;
        self.command_timestamp = ::std::option::Option::None;
        self.yellow.clear();
        self.blue.clear();
        self.designated_position.clear();
        self.blueTeamOnPositiveHalf = ::std::option::Option::None;
        self.gameEvent.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_Referee {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_Referee_TeamInfo {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    score: ::std::option::Option<u32>,
    red_cards: ::std::option::Option<u32>,
    yellow_card_times: ::std::vec::Vec<u32>,
    yellow_cards: ::std::option::Option<u32>,
    timeouts: ::std::option::Option<u32>,
    timeout_time: ::std::option::Option<u32>,
    goalie: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_Referee_TeamInfo {
    fn default() -> &'a SSL_Referee_TeamInfo {
        <SSL_Referee_TeamInfo as ::protobuf::Message>::default_instance()
    }
}

impl SSL_Referee_TeamInfo {
    pub fn new() -> SSL_Referee_TeamInfo {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 score = 2;


    pub fn get_score(&self) -> u32 {
        self.score.unwrap_or(0)
    }
    pub fn clear_score(&mut self) {
        self.score = ::std::option::Option::None;
    }

    pub fn has_score(&self) -> bool {
        self.score.is_some()
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: u32) {
        self.score = ::std::option::Option::Some(v);
    }

    // required uint32 red_cards = 3;


    pub fn get_red_cards(&self) -> u32 {
        self.red_cards.unwrap_or(0)
    }
    pub fn clear_red_cards(&mut self) {
        self.red_cards = ::std::option::Option::None;
    }

    pub fn has_red_cards(&self) -> bool {
        self.red_cards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_red_cards(&mut self, v: u32) {
        self.red_cards = ::std::option::Option::Some(v);
    }

    // repeated uint32 yellow_card_times = 4;


    pub fn get_yellow_card_times(&self) -> &[u32] {
        &self.yellow_card_times
    }
    pub fn clear_yellow_card_times(&mut self) {
        self.yellow_card_times.clear();
    }

    // Param is passed by value, moved
    pub fn set_yellow_card_times(&mut self, v: ::std::vec::Vec<u32>) {
        self.yellow_card_times = v;
    }

    // Mutable pointer to the field.
    pub fn mut_yellow_card_times(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.yellow_card_times
    }

    // Take field
    pub fn take_yellow_card_times(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.yellow_card_times, ::std::vec::Vec::new())
    }

    // required uint32 yellow_cards = 5;


    pub fn get_yellow_cards(&self) -> u32 {
        self.yellow_cards.unwrap_or(0)
    }
    pub fn clear_yellow_cards(&mut self) {
        self.yellow_cards = ::std::option::Option::None;
    }

    pub fn has_yellow_cards(&self) -> bool {
        self.yellow_cards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yellow_cards(&mut self, v: u32) {
        self.yellow_cards = ::std::option::Option::Some(v);
    }

    // required uint32 timeouts = 6;


    pub fn get_timeouts(&self) -> u32 {
        self.timeouts.unwrap_or(0)
    }
    pub fn clear_timeouts(&mut self) {
        self.timeouts = ::std::option::Option::None;
    }

    pub fn has_timeouts(&self) -> bool {
        self.timeouts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeouts(&mut self, v: u32) {
        self.timeouts = ::std::option::Option::Some(v);
    }

    // required uint32 timeout_time = 7;


    pub fn get_timeout_time(&self) -> u32 {
        self.timeout_time.unwrap_or(0)
    }
    pub fn clear_timeout_time(&mut self) {
        self.timeout_time = ::std::option::Option::None;
    }

    pub fn has_timeout_time(&self) -> bool {
        self.timeout_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout_time(&mut self, v: u32) {
        self.timeout_time = ::std::option::Option::Some(v);
    }

    // required uint32 goalie = 8;


    pub fn get_goalie(&self) -> u32 {
        self.goalie.unwrap_or(0)
    }
    pub fn clear_goalie(&mut self) {
        self.goalie = ::std::option::Option::None;
    }

    pub fn has_goalie(&self) -> bool {
        self.goalie.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goalie(&mut self, v: u32) {
        self.goalie = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_Referee_TeamInfo {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.score.is_none() {
            return false;
        }
        if self.red_cards.is_none() {
            return false;
        }
        if self.yellow_cards.is_none() {
            return false;
        }
        if self.timeouts.is_none() {
            return false;
        }
        if self.timeout_time.is_none() {
            return false;
        }
        if self.goalie.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.score = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.red_cards = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.yellow_card_times)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.yellow_cards = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timeouts = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timeout_time = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.goalie = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.score {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.red_cards {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.yellow_card_times.is_empty() {
            my_size += ::protobuf::rt::vec_packed_varint_size(4, &self.yellow_card_times);
        }
        if let Some(v) = self.yellow_cards {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.timeouts {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.timeout_time {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goalie {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.score {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.red_cards {
            os.write_uint32(3, v)?;
        }
        if !self.yellow_card_times.is_empty() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            // TODO: Data size is computed again, it should be cached
            os.write_raw_varint32(::protobuf::rt::vec_packed_varint_data_size(&self.yellow_card_times))?;
            for v in &self.yellow_card_times {
                os.write_uint32_no_tag(*v)?;
            };
        }
        if let Some(v) = self.yellow_cards {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.timeouts {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.timeout_time {
            os.write_uint32(7, v)?;
        }
        if let Some(v) = self.goalie {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_Referee_TeamInfo {
        SSL_Referee_TeamInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &SSL_Referee_TeamInfo| { &m.name },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "score",
                    |m: &SSL_Referee_TeamInfo| { &m.score },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.score },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "red_cards",
                    |m: &SSL_Referee_TeamInfo| { &m.red_cards },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.red_cards },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "yellow_card_times",
                    |m: &SSL_Referee_TeamInfo| { &m.yellow_card_times },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.yellow_card_times },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "yellow_cards",
                    |m: &SSL_Referee_TeamInfo| { &m.yellow_cards },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.yellow_cards },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "timeouts",
                    |m: &SSL_Referee_TeamInfo| { &m.timeouts },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.timeouts },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "timeout_time",
                    |m: &SSL_Referee_TeamInfo| { &m.timeout_time },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.timeout_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "goalie",
                    |m: &SSL_Referee_TeamInfo| { &m.goalie },
                    |m: &mut SSL_Referee_TeamInfo| { &mut m.goalie },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_Referee_TeamInfo>(
                    "SSL_Referee_TeamInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_Referee_TeamInfo {
        static mut instance: ::protobuf::lazy::Lazy<SSL_Referee_TeamInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_Referee_TeamInfo,
        };
        unsafe {
            instance.get(SSL_Referee_TeamInfo::new)
        }
    }
}

impl ::protobuf::Clear for SSL_Referee_TeamInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.score = ::std::option::Option::None;
        self.red_cards = ::std::option::Option::None;
        self.yellow_card_times.clear();
        self.yellow_cards = ::std::option::Option::None;
        self.timeouts = ::std::option::Option::None;
        self.timeout_time = ::std::option::Option::None;
        self.goalie = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_Referee_TeamInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_TeamInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_Referee_Point {
    // message fields
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_Referee_Point {
    fn default() -> &'a SSL_Referee_Point {
        <SSL_Referee_Point as ::protobuf::Message>::default_instance()
    }
}

impl SSL_Referee_Point {
    pub fn new() -> SSL_Referee_Point {
        ::std::default::Default::default()
    }

    // required float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_Referee_Point {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += 5;
        }
        if let Some(v) = self.y {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_float(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_Referee_Point {
        SSL_Referee_Point::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &SSL_Referee_Point| { &m.x },
                    |m: &mut SSL_Referee_Point| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &SSL_Referee_Point| { &m.y },
                    |m: &mut SSL_Referee_Point| { &mut m.y },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SSL_Referee_Point>(
                    "SSL_Referee_Point",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SSL_Referee_Point {
        static mut instance: ::protobuf::lazy::Lazy<SSL_Referee_Point> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SSL_Referee_Point,
        };
        unsafe {
            instance.get(SSL_Referee_Point::new)
        }
    }
}

impl ::protobuf::Clear for SSL_Referee_Point {
    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_Referee_Point {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_Point {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SSL_Referee_Stage {
    NORMAL_FIRST_HALF_PRE = 0,
    NORMAL_FIRST_HALF = 1,
    NORMAL_HALF_TIME = 2,
    NORMAL_SECOND_HALF_PRE = 3,
    NORMAL_SECOND_HALF = 4,
    EXTRA_TIME_BREAK = 5,
    EXTRA_FIRST_HALF_PRE = 6,
    EXTRA_FIRST_HALF = 7,
    EXTRA_HALF_TIME = 8,
    EXTRA_SECOND_HALF_PRE = 9,
    EXTRA_SECOND_HALF = 10,
    PENALTY_SHOOTOUT_BREAK = 11,
    PENALTY_SHOOTOUT = 12,
    POST_GAME = 13,
}

impl ::protobuf::ProtobufEnum for SSL_Referee_Stage {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SSL_Referee_Stage> {
        match value {
            0 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_FIRST_HALF_PRE),
            1 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_FIRST_HALF),
            2 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_HALF_TIME),
            3 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_SECOND_HALF_PRE),
            4 => ::std::option::Option::Some(SSL_Referee_Stage::NORMAL_SECOND_HALF),
            5 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_TIME_BREAK),
            6 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_FIRST_HALF_PRE),
            7 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_FIRST_HALF),
            8 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_HALF_TIME),
            9 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_SECOND_HALF_PRE),
            10 => ::std::option::Option::Some(SSL_Referee_Stage::EXTRA_SECOND_HALF),
            11 => ::std::option::Option::Some(SSL_Referee_Stage::PENALTY_SHOOTOUT_BREAK),
            12 => ::std::option::Option::Some(SSL_Referee_Stage::PENALTY_SHOOTOUT),
            13 => ::std::option::Option::Some(SSL_Referee_Stage::POST_GAME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SSL_Referee_Stage] = &[
            SSL_Referee_Stage::NORMAL_FIRST_HALF_PRE,
            SSL_Referee_Stage::NORMAL_FIRST_HALF,
            SSL_Referee_Stage::NORMAL_HALF_TIME,
            SSL_Referee_Stage::NORMAL_SECOND_HALF_PRE,
            SSL_Referee_Stage::NORMAL_SECOND_HALF,
            SSL_Referee_Stage::EXTRA_TIME_BREAK,
            SSL_Referee_Stage::EXTRA_FIRST_HALF_PRE,
            SSL_Referee_Stage::EXTRA_FIRST_HALF,
            SSL_Referee_Stage::EXTRA_HALF_TIME,
            SSL_Referee_Stage::EXTRA_SECOND_HALF_PRE,
            SSL_Referee_Stage::EXTRA_SECOND_HALF,
            SSL_Referee_Stage::PENALTY_SHOOTOUT_BREAK,
            SSL_Referee_Stage::PENALTY_SHOOTOUT,
            SSL_Referee_Stage::POST_GAME,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SSL_Referee_Stage", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SSL_Referee_Stage {
}

impl ::std::default::Default for SSL_Referee_Stage {
    fn default() -> Self {
        SSL_Referee_Stage::NORMAL_FIRST_HALF_PRE
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_Stage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SSL_Referee_Command {
    HALT = 0,
    STOP = 1,
    NORMAL_START = 2,
    FORCE_START = 3,
    PREPARE_KICKOFF_YELLOW = 4,
    PREPARE_KICKOFF_BLUE = 5,
    PREPARE_PENALTY_YELLOW = 6,
    PREPARE_PENALTY_BLUE = 7,
    DIRECT_FREE_YELLOW = 8,
    DIRECT_FREE_BLUE = 9,
    INDIRECT_FREE_YELLOW = 10,
    INDIRECT_FREE_BLUE = 11,
    TIMEOUT_YELLOW = 12,
    TIMEOUT_BLUE = 13,
    GOAL_YELLOW = 14,
    GOAL_BLUE = 15,
    BALL_PLACEMENT_YELLOW = 16,
    BALL_PLACEMENT_BLUE = 17,
}

impl ::protobuf::ProtobufEnum for SSL_Referee_Command {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SSL_Referee_Command> {
        match value {
            0 => ::std::option::Option::Some(SSL_Referee_Command::HALT),
            1 => ::std::option::Option::Some(SSL_Referee_Command::STOP),
            2 => ::std::option::Option::Some(SSL_Referee_Command::NORMAL_START),
            3 => ::std::option::Option::Some(SSL_Referee_Command::FORCE_START),
            4 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_KICKOFF_YELLOW),
            5 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_KICKOFF_BLUE),
            6 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_PENALTY_YELLOW),
            7 => ::std::option::Option::Some(SSL_Referee_Command::PREPARE_PENALTY_BLUE),
            8 => ::std::option::Option::Some(SSL_Referee_Command::DIRECT_FREE_YELLOW),
            9 => ::std::option::Option::Some(SSL_Referee_Command::DIRECT_FREE_BLUE),
            10 => ::std::option::Option::Some(SSL_Referee_Command::INDIRECT_FREE_YELLOW),
            11 => ::std::option::Option::Some(SSL_Referee_Command::INDIRECT_FREE_BLUE),
            12 => ::std::option::Option::Some(SSL_Referee_Command::TIMEOUT_YELLOW),
            13 => ::std::option::Option::Some(SSL_Referee_Command::TIMEOUT_BLUE),
            14 => ::std::option::Option::Some(SSL_Referee_Command::GOAL_YELLOW),
            15 => ::std::option::Option::Some(SSL_Referee_Command::GOAL_BLUE),
            16 => ::std::option::Option::Some(SSL_Referee_Command::BALL_PLACEMENT_YELLOW),
            17 => ::std::option::Option::Some(SSL_Referee_Command::BALL_PLACEMENT_BLUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SSL_Referee_Command] = &[
            SSL_Referee_Command::HALT,
            SSL_Referee_Command::STOP,
            SSL_Referee_Command::NORMAL_START,
            SSL_Referee_Command::FORCE_START,
            SSL_Referee_Command::PREPARE_KICKOFF_YELLOW,
            SSL_Referee_Command::PREPARE_KICKOFF_BLUE,
            SSL_Referee_Command::PREPARE_PENALTY_YELLOW,
            SSL_Referee_Command::PREPARE_PENALTY_BLUE,
            SSL_Referee_Command::DIRECT_FREE_YELLOW,
            SSL_Referee_Command::DIRECT_FREE_BLUE,
            SSL_Referee_Command::INDIRECT_FREE_YELLOW,
            SSL_Referee_Command::INDIRECT_FREE_BLUE,
            SSL_Referee_Command::TIMEOUT_YELLOW,
            SSL_Referee_Command::TIMEOUT_BLUE,
            SSL_Referee_Command::GOAL_YELLOW,
            SSL_Referee_Command::GOAL_BLUE,
            SSL_Referee_Command::BALL_PLACEMENT_YELLOW,
            SSL_Referee_Command::BALL_PLACEMENT_BLUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SSL_Referee_Command", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SSL_Referee_Command {
}

impl ::std::default::Default for SSL_Referee_Command {
    fn default() -> Self {
        SSL_Referee_Command::HALT
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_Command {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rreferee.proto\x1a\x10game_event.proto\"\x9e\x0c\n\x0bSSL_Referee\x12\
    )\n\x10packet_timestamp\x18\x01\x20\x02(\x04R\x0fpacketTimestamp\x12(\n\
    \x05stage\x18\x02\x20\x02(\x0e2\x12.SSL_Referee.StageR\x05stage\x12&\n\
    \x0fstage_time_left\x18\x03\x20\x01(\x11R\rstageTimeLeft\x12.\n\x07comma\
    nd\x18\x04\x20\x02(\x0e2\x14.SSL_Referee.CommandR\x07command\x12'\n\x0fc\
    ommand_counter\x18\x05\x20\x02(\rR\x0ecommandCounter\x12+\n\x11command_t\
    imestamp\x18\x06\x20\x02(\x04R\x10commandTimestamp\x12-\n\x06yellow\x18\
    \x07\x20\x02(\x0b2\x15.SSL_Referee.TeamInfoR\x06yellow\x12)\n\x04blue\
    \x18\x08\x20\x02(\x0b2\x15.SSL_Referee.TeamInfoR\x04blue\x12C\n\x13desig\
    nated_position\x18\t\x20\x01(\x0b2\x12.SSL_Referee.PointR\x12designatedP\
    osition\x126\n\x16blueTeamOnPositiveHalf\x18\n\x20\x01(\x08R\x16blueTeam\
    OnPositiveHalf\x125\n\tgameEvent\x18\x0b\x20\x01(\x0b2\x17.SSL_Referee_G\
    ame_EventR\tgameEvent\x1a\xfb\x01\n\x08TeamInfo\x12\x12\n\x04name\x18\
    \x01\x20\x02(\tR\x04name\x12\x14\n\x05score\x18\x02\x20\x02(\rR\x05score\
    \x12\x1b\n\tred_cards\x18\x03\x20\x02(\rR\x08redCards\x12.\n\x11yellow_c\
    ard_times\x18\x04\x20\x03(\rR\x0fyellowCardTimesB\x02\x10\x01\x12!\n\x0c\
    yellow_cards\x18\x05\x20\x02(\rR\x0byellowCards\x12\x1a\n\x08timeouts\
    \x18\x06\x20\x02(\rR\x08timeouts\x12!\n\x0ctimeout_time\x18\x07\x20\x02(\
    \rR\x0btimeoutTime\x12\x16\n\x06goalie\x18\x08\x20\x02(\rR\x06goalie\x1a\
    #\n\x05Point\x12\x0c\n\x01x\x18\x01\x20\x02(\x02R\x01x\x12\x0c\n\x01y\
    \x18\x02\x20\x02(\x02R\x01y\"\xd1\x02\n\x05Stage\x12\x19\n\x15NORMAL_FIR\
    ST_HALF_PRE\x10\0\x12\x15\n\x11NORMAL_FIRST_HALF\x10\x01\x12\x14\n\x10NO\
    RMAL_HALF_TIME\x10\x02\x12\x1a\n\x16NORMAL_SECOND_HALF_PRE\x10\x03\x12\
    \x16\n\x12NORMAL_SECOND_HALF\x10\x04\x12\x14\n\x10EXTRA_TIME_BREAK\x10\
    \x05\x12\x18\n\x14EXTRA_FIRST_HALF_PRE\x10\x06\x12\x14\n\x10EXTRA_FIRST_\
    HALF\x10\x07\x12\x13\n\x0fEXTRA_HALF_TIME\x10\x08\x12\x19\n\x15EXTRA_SEC\
    OND_HALF_PRE\x10\t\x12\x15\n\x11EXTRA_SECOND_HALF\x10\n\x12\x1a\n\x16PEN\
    ALTY_SHOOTOUT_BREAK\x10\x0b\x12\x14\n\x10PENALTY_SHOOTOUT\x10\x0c\x12\r\
    \n\tPOST_GAME\x10\r\"\x86\x03\n\x07Command\x12\x08\n\x04HALT\x10\0\x12\
    \x08\n\x04STOP\x10\x01\x12\x10\n\x0cNORMAL_START\x10\x02\x12\x0f\n\x0bFO\
    RCE_START\x10\x03\x12\x1a\n\x16PREPARE_KICKOFF_YELLOW\x10\x04\x12\x18\n\
    \x14PREPARE_KICKOFF_BLUE\x10\x05\x12\x1a\n\x16PREPARE_PENALTY_YELLOW\x10\
    \x06\x12\x18\n\x14PREPARE_PENALTY_BLUE\x10\x07\x12\x16\n\x12DIRECT_FREE_\
    YELLOW\x10\x08\x12\x14\n\x10DIRECT_FREE_BLUE\x10\t\x12\x18\n\x14INDIRECT\
    _FREE_YELLOW\x10\n\x12\x16\n\x12INDIRECT_FREE_BLUE\x10\x0b\x12\x12\n\x0e\
    TIMEOUT_YELLOW\x10\x0c\x12\x10\n\x0cTIMEOUT_BLUE\x10\r\x12\x0f\n\x0bGOAL\
    _YELLOW\x10\x0e\x12\r\n\tGOAL_BLUE\x10\x0f\x12\x19\n\x15BALL_PLACEMENT_Y\
    ELLOW\x10\x10\x12\x17\n\x13BALL_PLACEMENT_BLUE\x10\x11\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
