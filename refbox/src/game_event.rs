// This file is generated by rust-protobuf 2.9.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `game_event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_9_0;

#[derive(PartialEq,Clone,Default)]
pub struct SSL_Referee_Game_Event {
    // message fields
    gameEventType: ::std::option::Option<SSL_Referee_Game_Event_GameEventType>,
    pub originator: ::protobuf::SingularPtrField<SSL_Referee_Game_Event_Originator>,
    message: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_Referee_Game_Event {
    fn default() -> &'a SSL_Referee_Game_Event {
        <SSL_Referee_Game_Event as ::protobuf::Message>::default_instance()
    }
}

impl SSL_Referee_Game_Event {
    pub fn new() -> SSL_Referee_Game_Event {
        ::std::default::Default::default()
    }

    // required .SSL_Referee_Game_Event.GameEventType gameEventType = 1;


    pub fn get_gameEventType(&self) -> SSL_Referee_Game_Event_GameEventType {
        self.gameEventType.unwrap_or(SSL_Referee_Game_Event_GameEventType::UNKNOWN)
    }
    pub fn clear_gameEventType(&mut self) {
        self.gameEventType = ::std::option::Option::None;
    }

    pub fn has_gameEventType(&self) -> bool {
        self.gameEventType.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameEventType(&mut self, v: SSL_Referee_Game_Event_GameEventType) {
        self.gameEventType = ::std::option::Option::Some(v);
    }

    // optional .SSL_Referee_Game_Event.Originator originator = 2;


    pub fn get_originator(&self) -> &SSL_Referee_Game_Event_Originator {
        self.originator.as_ref().unwrap_or_else(|| <SSL_Referee_Game_Event_Originator as ::protobuf::Message>::default_instance())
    }
    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    pub fn has_originator(&self) -> bool {
        self.originator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: SSL_Referee_Game_Event_Originator) {
        self.originator = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut SSL_Referee_Game_Event_Originator {
        if self.originator.is_none() {
            self.originator.set_default();
        }
        self.originator.as_mut().unwrap()
    }

    // Take field
    pub fn take_originator(&mut self) -> SSL_Referee_Game_Event_Originator {
        self.originator.take().unwrap_or_else(|| SSL_Referee_Game_Event_Originator::new())
    }

    // optional string message = 3;


    pub fn get_message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for SSL_Referee_Game_Event {
    fn is_initialized(&self) -> bool {
        if self.gameEventType.is_none() {
            return false;
        }
        for v in &self.originator {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.gameEventType, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.gameEventType {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.originator.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.gameEventType {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.originator.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_Referee_Game_Event {
        SSL_Referee_Game_Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeEnum<SSL_Referee_Game_Event_GameEventType>, _>(
                "gameEventType",
                |m: &SSL_Referee_Game_Event| { &m.gameEventType },
                |m: &mut SSL_Referee_Game_Event| { &mut m.gameEventType },
                SSL_Referee_Game_Event::get_gameEventType,
            ));
            fields.push(::protobuf::reflect::rt::make_option_accessor::<_, ::protobuf::reflect::types::ProtobufTypeMessage<SSL_Referee_Game_Event_Originator>, _>(
                "originator",
                |m: &SSL_Referee_Game_Event| { &m.originator },
                |m: &mut SSL_Referee_Game_Event| { &mut m.originator },
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_ref_accessor::<_, ::protobuf::reflect::types::ProtobufTypeString, _>(
                "message",
                |m: &SSL_Referee_Game_Event| { &m.message },
                |m: &mut SSL_Referee_Game_Event| { &mut m.message },
                SSL_Referee_Game_Event::get_message,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<SSL_Referee_Game_Event>(
                "SSL_Referee_Game_Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_Referee_Game_Event {
        static instance: ::protobuf::lazy::Lazy<SSL_Referee_Game_Event> = ::protobuf::lazy::Lazy::INIT;
        instance.get(SSL_Referee_Game_Event::new)
    }
}

impl ::protobuf::Clear for SSL_Referee_Game_Event {
    fn clear(&mut self) {
        self.gameEventType = ::std::option::Option::None;
        self.originator.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_Referee_Game_Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_Game_Event {
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_Referee_Game_Event_Originator {
    // message fields
    team: ::std::option::Option<SSL_Referee_Game_Event_Team>,
    botId: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_Referee_Game_Event_Originator {
    fn default() -> &'a SSL_Referee_Game_Event_Originator {
        <SSL_Referee_Game_Event_Originator as ::protobuf::Message>::default_instance()
    }
}

impl SSL_Referee_Game_Event_Originator {
    pub fn new() -> SSL_Referee_Game_Event_Originator {
        ::std::default::Default::default()
    }

    // required .SSL_Referee_Game_Event.Team team = 1;


    pub fn get_team(&self) -> SSL_Referee_Game_Event_Team {
        self.team.unwrap_or(SSL_Referee_Game_Event_Team::TEAM_UNKNOWN)
    }
    pub fn clear_team(&mut self) {
        self.team = ::std::option::Option::None;
    }

    pub fn has_team(&self) -> bool {
        self.team.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team(&mut self, v: SSL_Referee_Game_Event_Team) {
        self.team = ::std::option::Option::Some(v);
    }

    // optional uint32 botId = 2;


    pub fn get_botId(&self) -> u32 {
        self.botId.unwrap_or(0)
    }
    pub fn clear_botId(&mut self) {
        self.botId = ::std::option::Option::None;
    }

    pub fn has_botId(&self) -> bool {
        self.botId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_botId(&mut self, v: u32) {
        self.botId = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_Referee_Game_Event_Originator {
    fn is_initialized(&self) -> bool {
        if self.team.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.team, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.botId = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.team {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.botId {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.team {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.botId {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_Referee_Game_Event_Originator {
        SSL_Referee_Game_Event_Originator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeEnum<SSL_Referee_Game_Event_Team>, _>(
                "team",
                |m: &SSL_Referee_Game_Event_Originator| { &m.team },
                |m: &mut SSL_Referee_Game_Event_Originator| { &mut m.team },
                SSL_Referee_Game_Event_Originator::get_team,
            ));
            fields.push(::protobuf::reflect::rt::make_option_get_copy_accessor::<_, ::protobuf::reflect::types::ProtobufTypeUint32, _>(
                "botId",
                |m: &SSL_Referee_Game_Event_Originator| { &m.botId },
                |m: &mut SSL_Referee_Game_Event_Originator| { &mut m.botId },
                SSL_Referee_Game_Event_Originator::get_botId,
            ));
            ::protobuf::reflect::MessageDescriptor::new::<SSL_Referee_Game_Event_Originator>(
                "SSL_Referee_Game_Event_Originator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_Referee_Game_Event_Originator {
        static instance: ::protobuf::lazy::Lazy<SSL_Referee_Game_Event_Originator> = ::protobuf::lazy::Lazy::INIT;
        instance.get(SSL_Referee_Game_Event_Originator::new)
    }
}

impl ::protobuf::Clear for SSL_Referee_Game_Event_Originator {
    fn clear(&mut self) {
        self.team = ::std::option::Option::None;
        self.botId = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_Referee_Game_Event_Originator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_Game_Event_Originator {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SSL_Referee_Game_Event_GameEventType {
    UNKNOWN = 0,
    CUSTOM = 1,
    NUMBER_OF_PLAYERS = 2,
    BALL_LEFT_FIELD = 3,
    GOAL = 4,
    KICK_TIMEOUT = 5,
    NO_PROGRESS_IN_GAME = 6,
    BOT_COLLISION = 7,
    MULTIPLE_DEFENDER = 8,
    MULTIPLE_DEFENDER_PARTIALLY = 9,
    ATTACKER_IN_DEFENSE_AREA = 10,
    ICING = 11,
    BALL_SPEED = 12,
    ROBOT_STOP_SPEED = 13,
    BALL_DRIBBLING = 14,
    ATTACKER_TOUCH_KEEPER = 15,
    DOUBLE_TOUCH = 16,
    ATTACKER_TO_DEFENCE_AREA = 17,
    DEFENDER_TO_KICK_POINT_DISTANCE = 18,
    BALL_HOLDING = 19,
    INDIRECT_GOAL = 20,
    BALL_PLACEMENT_FAILED = 21,
    CHIP_ON_GOAL = 22,
}

impl ::protobuf::ProtobufEnum for SSL_Referee_Game_Event_GameEventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SSL_Referee_Game_Event_GameEventType> {
        match value {
            0 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::UNKNOWN),
            1 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::CUSTOM),
            2 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::NUMBER_OF_PLAYERS),
            3 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::BALL_LEFT_FIELD),
            4 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::GOAL),
            5 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::KICK_TIMEOUT),
            6 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::NO_PROGRESS_IN_GAME),
            7 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::BOT_COLLISION),
            8 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::MULTIPLE_DEFENDER),
            9 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::MULTIPLE_DEFENDER_PARTIALLY),
            10 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::ATTACKER_IN_DEFENSE_AREA),
            11 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::ICING),
            12 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::BALL_SPEED),
            13 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::ROBOT_STOP_SPEED),
            14 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::BALL_DRIBBLING),
            15 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::ATTACKER_TOUCH_KEEPER),
            16 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::DOUBLE_TOUCH),
            17 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::ATTACKER_TO_DEFENCE_AREA),
            18 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::DEFENDER_TO_KICK_POINT_DISTANCE),
            19 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::BALL_HOLDING),
            20 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::INDIRECT_GOAL),
            21 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::BALL_PLACEMENT_FAILED),
            22 => ::std::option::Option::Some(SSL_Referee_Game_Event_GameEventType::CHIP_ON_GOAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SSL_Referee_Game_Event_GameEventType] = &[
            SSL_Referee_Game_Event_GameEventType::UNKNOWN,
            SSL_Referee_Game_Event_GameEventType::CUSTOM,
            SSL_Referee_Game_Event_GameEventType::NUMBER_OF_PLAYERS,
            SSL_Referee_Game_Event_GameEventType::BALL_LEFT_FIELD,
            SSL_Referee_Game_Event_GameEventType::GOAL,
            SSL_Referee_Game_Event_GameEventType::KICK_TIMEOUT,
            SSL_Referee_Game_Event_GameEventType::NO_PROGRESS_IN_GAME,
            SSL_Referee_Game_Event_GameEventType::BOT_COLLISION,
            SSL_Referee_Game_Event_GameEventType::MULTIPLE_DEFENDER,
            SSL_Referee_Game_Event_GameEventType::MULTIPLE_DEFENDER_PARTIALLY,
            SSL_Referee_Game_Event_GameEventType::ATTACKER_IN_DEFENSE_AREA,
            SSL_Referee_Game_Event_GameEventType::ICING,
            SSL_Referee_Game_Event_GameEventType::BALL_SPEED,
            SSL_Referee_Game_Event_GameEventType::ROBOT_STOP_SPEED,
            SSL_Referee_Game_Event_GameEventType::BALL_DRIBBLING,
            SSL_Referee_Game_Event_GameEventType::ATTACKER_TOUCH_KEEPER,
            SSL_Referee_Game_Event_GameEventType::DOUBLE_TOUCH,
            SSL_Referee_Game_Event_GameEventType::ATTACKER_TO_DEFENCE_AREA,
            SSL_Referee_Game_Event_GameEventType::DEFENDER_TO_KICK_POINT_DISTANCE,
            SSL_Referee_Game_Event_GameEventType::BALL_HOLDING,
            SSL_Referee_Game_Event_GameEventType::INDIRECT_GOAL,
            SSL_Referee_Game_Event_GameEventType::BALL_PLACEMENT_FAILED,
            SSL_Referee_Game_Event_GameEventType::CHIP_ON_GOAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<SSL_Referee_Game_Event_GameEventType>("SSL_Referee_Game_Event_GameEventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SSL_Referee_Game_Event_GameEventType {
}

impl ::std::default::Default for SSL_Referee_Game_Event_GameEventType {
    fn default() -> Self {
        SSL_Referee_Game_Event_GameEventType::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_Game_Event_GameEventType {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SSL_Referee_Game_Event_Team {
    TEAM_UNKNOWN = 0,
    TEAM_YELLOW = 1,
    TEAM_BLUE = 2,
}

impl ::protobuf::ProtobufEnum for SSL_Referee_Game_Event_Team {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SSL_Referee_Game_Event_Team> {
        match value {
            0 => ::std::option::Option::Some(SSL_Referee_Game_Event_Team::TEAM_UNKNOWN),
            1 => ::std::option::Option::Some(SSL_Referee_Game_Event_Team::TEAM_YELLOW),
            2 => ::std::option::Option::Some(SSL_Referee_Game_Event_Team::TEAM_BLUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SSL_Referee_Game_Event_Team] = &[
            SSL_Referee_Game_Event_Team::TEAM_UNKNOWN,
            SSL_Referee_Game_Event_Team::TEAM_YELLOW,
            SSL_Referee_Game_Event_Team::TEAM_BLUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new::<SSL_Referee_Game_Event_Team>("SSL_Referee_Game_Event_Team", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SSL_Referee_Game_Event_Team {
}

impl ::std::default::Default for SSL_Referee_Game_Event_Team {
    fn default() -> Self {
        SSL_Referee_Game_Event_Team::TEAM_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_Referee_Game_Event_Team {
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10game_event.proto\"\xcf\x06\n\x16SSL_Referee_Game_Event\x12K\n\rgam\
    eEventType\x18\x01\x20\x02(\x0e2%.SSL_Referee_Game_Event.GameEventTypeR\
    \rgameEventType\x12B\n\noriginator\x18\x02\x20\x01(\x0b2\".SSL_Referee_G\
    ame_Event.OriginatorR\noriginator\x12\x18\n\x07message\x18\x03\x20\x01(\
    \tR\x07message\x1aT\n\nOriginator\x120\n\x04team\x18\x01\x20\x02(\x0e2\
    \x1c.SSL_Referee_Game_Event.TeamR\x04team\x12\x14\n\x05botId\x18\x02\x20\
    \x01(\rR\x05botId\"\xf9\x03\n\rGameEventType\x12\x0b\n\x07UNKNOWN\x10\0\
    \x12\n\n\x06CUSTOM\x10\x01\x12\x15\n\x11NUMBER_OF_PLAYERS\x10\x02\x12\
    \x13\n\x0fBALL_LEFT_FIELD\x10\x03\x12\x08\n\x04GOAL\x10\x04\x12\x10\n\
    \x0cKICK_TIMEOUT\x10\x05\x12\x17\n\x13NO_PROGRESS_IN_GAME\x10\x06\x12\
    \x11\n\rBOT_COLLISION\x10\x07\x12\x15\n\x11MULTIPLE_DEFENDER\x10\x08\x12\
    \x1f\n\x1bMULTIPLE_DEFENDER_PARTIALLY\x10\t\x12\x1c\n\x18ATTACKER_IN_DEF\
    ENSE_AREA\x10\n\x12\t\n\x05ICING\x10\x0b\x12\x0e\n\nBALL_SPEED\x10\x0c\
    \x12\x14\n\x10ROBOT_STOP_SPEED\x10\r\x12\x12\n\x0eBALL_DRIBBLING\x10\x0e\
    \x12\x19\n\x15ATTACKER_TOUCH_KEEPER\x10\x0f\x12\x10\n\x0cDOUBLE_TOUCH\
    \x10\x10\x12\x1c\n\x18ATTACKER_TO_DEFENCE_AREA\x10\x11\x12#\n\x1fDEFENDE\
    R_TO_KICK_POINT_DISTANCE\x10\x12\x12\x10\n\x0cBALL_HOLDING\x10\x13\x12\
    \x11\n\rINDIRECT_GOAL\x10\x14\x12\x19\n\x15BALL_PLACEMENT_FAILED\x10\x15\
    \x12\x10\n\x0cCHIP_ON_GOAL\x10\x16\"8\n\x04Team\x12\x10\n\x0cTEAM_UNKNOW\
    N\x10\0\x12\x0f\n\x0bTEAM_YELLOW\x10\x01\x12\r\n\tTEAM_BLUE\x10\x02\
";

static file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
